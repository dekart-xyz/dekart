// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: proto/dekart.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dekart_CreateReport_FullMethodName               = "/Dekart/CreateReport"
	Dekart_ForkReport_FullMethodName                 = "/Dekart/ForkReport"
	Dekart_UpdateReport_FullMethodName               = "/Dekart/UpdateReport"
	Dekart_ArchiveReport_FullMethodName              = "/Dekart/ArchiveReport"
	Dekart_SetDiscoverable_FullMethodName            = "/Dekart/SetDiscoverable"
	Dekart_PublishReport_FullMethodName              = "/Dekart/PublishReport"
	Dekart_AllowExportDatasets_FullMethodName        = "/Dekart/AllowExportDatasets"
	Dekart_AddReadme_FullMethodName                  = "/Dekart/AddReadme"
	Dekart_RemoveReadme_FullMethodName               = "/Dekart/RemoveReadme"
	Dekart_AddReportDirectAccess_FullMethodName      = "/Dekart/AddReportDirectAccess"
	Dekart_SetTrackViewers_FullMethodName            = "/Dekart/SetTrackViewers"
	Dekart_CreateDataset_FullMethodName              = "/Dekart/CreateDataset"
	Dekart_RemoveDataset_FullMethodName              = "/Dekart/RemoveDataset"
	Dekart_UpdateDatasetName_FullMethodName          = "/Dekart/UpdateDatasetName"
	Dekart_UpdateDatasetConnection_FullMethodName    = "/Dekart/UpdateDatasetConnection"
	Dekart_CreateFile_FullMethodName                 = "/Dekart/CreateFile"
	Dekart_CreateQuery_FullMethodName                = "/Dekart/CreateQuery"
	Dekart_RunQuery_FullMethodName                   = "/Dekart/RunQuery"
	Dekart_RunAllQueries_FullMethodName              = "/Dekart/RunAllQueries"
	Dekart_CancelJob_FullMethodName                  = "/Dekart/CancelJob"
	Dekart_GetEnv_FullMethodName                     = "/Dekart/GetEnv"
	Dekart_GetReportStream_FullMethodName            = "/Dekart/GetReportStream"
	Dekart_GetReportListStream_FullMethodName        = "/Dekart/GetReportListStream"
	Dekart_GetUserStream_FullMethodName              = "/Dekart/GetUserStream"
	Dekart_GetUsage_FullMethodName                   = "/Dekart/GetUsage"
	Dekart_GetReportAnalytics_FullMethodName         = "/Dekart/GetReportAnalytics"
	Dekart_CreateConnection_FullMethodName           = "/Dekart/CreateConnection"
	Dekart_GetGcpProjectList_FullMethodName          = "/Dekart/GetGcpProjectList"
	Dekart_UpdateConnection_FullMethodName           = "/Dekart/UpdateConnection"
	Dekart_ArchiveConnection_FullMethodName          = "/Dekart/ArchiveConnection"
	Dekart_GetConnectionList_FullMethodName          = "/Dekart/GetConnectionList"
	Dekart_TestConnection_FullMethodName             = "/Dekart/TestConnection"
	Dekart_SetDefaultConnection_FullMethodName       = "/Dekart/SetDefaultConnection"
	Dekart_GetWherobotsConnectionHint_FullMethodName = "/Dekart/GetWherobotsConnectionHint"
	Dekart_RespondToInvite_FullMethodName            = "/Dekart/RespondToInvite"
	Dekart_CreateSubscription_FullMethodName         = "/Dekart/CreateSubscription"
	Dekart_GetStripePortalSession_FullMethodName     = "/Dekart/GetStripePortalSession"
	Dekart_CreateWorkspace_FullMethodName            = "/Dekart/CreateWorkspace"
	Dekart_UpdateWorkspace_FullMethodName            = "/Dekart/UpdateWorkspace"
	Dekart_GetWorkspace_FullMethodName               = "/Dekart/GetWorkspace"
	Dekart_UpdateWorkspaceUser_FullMethodName        = "/Dekart/UpdateWorkspaceUser"
)

// DekartClient is the client API for Dekart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DekartClient interface {
	// reports
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	ForkReport(ctx context.Context, in *ForkReportRequest, opts ...grpc.CallOption) (*ForkReportResponse, error)
	UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*UpdateReportResponse, error)
	ArchiveReport(ctx context.Context, in *ArchiveReportRequest, opts ...grpc.CallOption) (*ArchiveReportResponse, error)
	SetDiscoverable(ctx context.Context, in *SetDiscoverableRequest, opts ...grpc.CallOption) (*SetDiscoverableResponse, error)
	PublishReport(ctx context.Context, in *PublishReportRequest, opts ...grpc.CallOption) (*PublishReportResponse, error)
	AllowExportDatasets(ctx context.Context, in *AllowExportDatasetsRequest, opts ...grpc.CallOption) (*AllowExportDatasetsResponse, error)
	AddReadme(ctx context.Context, in *AddReadmeRequest, opts ...grpc.CallOption) (*AddReadmeResponse, error)
	RemoveReadme(ctx context.Context, in *RemoveReadmeRequest, opts ...grpc.CallOption) (*RemoveReadmeResponse, error)
	AddReportDirectAccess(ctx context.Context, in *AddReportDirectAccessRequest, opts ...grpc.CallOption) (*AddReportDirectAccessResponse, error)
	SetTrackViewers(ctx context.Context, in *SetTrackViewersRequest, opts ...grpc.CallOption) (*SetTrackViewersResponse, error)
	// datasets
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	RemoveDataset(ctx context.Context, in *RemoveDatasetRequest, opts ...grpc.CallOption) (*RemoveDatasetResponse, error)
	UpdateDatasetName(ctx context.Context, in *UpdateDatasetNameRequest, opts ...grpc.CallOption) (*UpdateDatasetNameResponse, error)
	UpdateDatasetConnection(ctx context.Context, in *UpdateDatasetConnectionRequest, opts ...grpc.CallOption) (*UpdateDatasetConnectionResponse, error)
	// files
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	// queries
	CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*CreateQueryResponse, error)
	RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error)
	RunAllQueries(ctx context.Context, in *RunAllQueriesRequest, opts ...grpc.CallOption) (*RunAllQueriesResponse, error)
	// jobs
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*GetEnvResponse, error)
	// streams
	GetReportStream(ctx context.Context, in *ReportStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReportStreamResponse], error)
	GetReportListStream(ctx context.Context, in *ReportListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReportListResponse], error)
	GetUserStream(ctx context.Context, in *GetUserStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserStreamResponse], error)
	// statistics
	GetUsage(ctx context.Context, in *GetUsageRequest, opts ...grpc.CallOption) (*GetUsageResponse, error)
	GetReportAnalytics(ctx context.Context, in *GetReportAnalyticsRequest, opts ...grpc.CallOption) (*GetReportAnalyticsResponse, error)
	// connections
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	GetGcpProjectList(ctx context.Context, in *GetGcpProjectListRequest, opts ...grpc.CallOption) (*GetGcpProjectListResponse, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	ArchiveConnection(ctx context.Context, in *ArchiveConnectionRequest, opts ...grpc.CallOption) (*ArchiveConnectionResponse, error)
	GetConnectionList(ctx context.Context, in *GetConnectionListRequest, opts ...grpc.CallOption) (*GetConnectionListResponse, error)
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error)
	SetDefaultConnection(ctx context.Context, in *SetDefaultConnectionRequest, opts ...grpc.CallOption) (*SetDefaultConnectionResponse, error)
	GetWherobotsConnectionHint(ctx context.Context, in *GetWherobotsConnectionHintRequest, opts ...grpc.CallOption) (*GetWherobotsConnectionHintResponse, error)
	// user
	RespondToInvite(ctx context.Context, in *RespondToInviteRequest, opts ...grpc.CallOption) (*RespondToInviteResponse, error)
	// subscriptions
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	GetStripePortalSession(ctx context.Context, in *GetStripePortalSessionRequest, opts ...grpc.CallOption) (*GetStripePortalSessionResponse, error)
	// workspace
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error)
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	UpdateWorkspaceUser(ctx context.Context, in *UpdateWorkspaceUserRequest, opts ...grpc.CallOption) (*UpdateWorkspaceUserResponse, error)
}

type dekartClient struct {
	cc grpc.ClientConnInterface
}

func NewDekartClient(cc grpc.ClientConnInterface) DekartClient {
	return &dekartClient{cc}
}

func (c *dekartClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) ForkReport(ctx context.Context, in *ForkReportRequest, opts ...grpc.CallOption) (*ForkReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForkReportResponse)
	err := c.cc.Invoke(ctx, Dekart_ForkReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*UpdateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReportResponse)
	err := c.cc.Invoke(ctx, Dekart_UpdateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) ArchiveReport(ctx context.Context, in *ArchiveReportRequest, opts ...grpc.CallOption) (*ArchiveReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveReportResponse)
	err := c.cc.Invoke(ctx, Dekart_ArchiveReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) SetDiscoverable(ctx context.Context, in *SetDiscoverableRequest, opts ...grpc.CallOption) (*SetDiscoverableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDiscoverableResponse)
	err := c.cc.Invoke(ctx, Dekart_SetDiscoverable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) PublishReport(ctx context.Context, in *PublishReportRequest, opts ...grpc.CallOption) (*PublishReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishReportResponse)
	err := c.cc.Invoke(ctx, Dekart_PublishReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) AllowExportDatasets(ctx context.Context, in *AllowExportDatasetsRequest, opts ...grpc.CallOption) (*AllowExportDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllowExportDatasetsResponse)
	err := c.cc.Invoke(ctx, Dekart_AllowExportDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) AddReadme(ctx context.Context, in *AddReadmeRequest, opts ...grpc.CallOption) (*AddReadmeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReadmeResponse)
	err := c.cc.Invoke(ctx, Dekart_AddReadme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) RemoveReadme(ctx context.Context, in *RemoveReadmeRequest, opts ...grpc.CallOption) (*RemoveReadmeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveReadmeResponse)
	err := c.cc.Invoke(ctx, Dekart_RemoveReadme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) AddReportDirectAccess(ctx context.Context, in *AddReportDirectAccessRequest, opts ...grpc.CallOption) (*AddReportDirectAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReportDirectAccessResponse)
	err := c.cc.Invoke(ctx, Dekart_AddReportDirectAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) SetTrackViewers(ctx context.Context, in *SetTrackViewersRequest, opts ...grpc.CallOption) (*SetTrackViewersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTrackViewersResponse)
	err := c.cc.Invoke(ctx, Dekart_SetTrackViewers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) RemoveDataset(ctx context.Context, in *RemoveDatasetRequest, opts ...grpc.CallOption) (*RemoveDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDatasetResponse)
	err := c.cc.Invoke(ctx, Dekart_RemoveDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) UpdateDatasetName(ctx context.Context, in *UpdateDatasetNameRequest, opts ...grpc.CallOption) (*UpdateDatasetNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDatasetNameResponse)
	err := c.cc.Invoke(ctx, Dekart_UpdateDatasetName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) UpdateDatasetConnection(ctx context.Context, in *UpdateDatasetConnectionRequest, opts ...grpc.CallOption) (*UpdateDatasetConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDatasetConnectionResponse)
	err := c.cc.Invoke(ctx, Dekart_UpdateDatasetConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*CreateQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueryResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunQueryResponse)
	err := c.cc.Invoke(ctx, Dekart_RunQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) RunAllQueries(ctx context.Context, in *RunAllQueriesRequest, opts ...grpc.CallOption) (*RunAllQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunAllQueriesResponse)
	err := c.cc.Invoke(ctx, Dekart_RunAllQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, Dekart_CancelJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*GetEnvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvResponse)
	err := c.cc.Invoke(ctx, Dekart_GetEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetReportStream(ctx context.Context, in *ReportStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReportStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dekart_ServiceDesc.Streams[0], Dekart_GetReportStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportStreamRequest, ReportStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dekart_GetReportStreamClient = grpc.ServerStreamingClient[ReportStreamResponse]

func (c *dekartClient) GetReportListStream(ctx context.Context, in *ReportListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReportListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dekart_ServiceDesc.Streams[1], Dekart_GetReportListStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportListRequest, ReportListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dekart_GetReportListStreamClient = grpc.ServerStreamingClient[ReportListResponse]

func (c *dekartClient) GetUserStream(ctx context.Context, in *GetUserStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dekart_ServiceDesc.Streams[2], Dekart_GetUserStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserStreamRequest, GetUserStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dekart_GetUserStreamClient = grpc.ServerStreamingClient[GetUserStreamResponse]

func (c *dekartClient) GetUsage(ctx context.Context, in *GetUsageRequest, opts ...grpc.CallOption) (*GetUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsageResponse)
	err := c.cc.Invoke(ctx, Dekart_GetUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetReportAnalytics(ctx context.Context, in *GetReportAnalyticsRequest, opts ...grpc.CallOption) (*GetReportAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportAnalyticsResponse)
	err := c.cc.Invoke(ctx, Dekart_GetReportAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetGcpProjectList(ctx context.Context, in *GetGcpProjectListRequest, opts ...grpc.CallOption) (*GetGcpProjectListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGcpProjectListResponse)
	err := c.cc.Invoke(ctx, Dekart_GetGcpProjectList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, Dekart_UpdateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) ArchiveConnection(ctx context.Context, in *ArchiveConnectionRequest, opts ...grpc.CallOption) (*ArchiveConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveConnectionResponse)
	err := c.cc.Invoke(ctx, Dekart_ArchiveConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetConnectionList(ctx context.Context, in *GetConnectionListRequest, opts ...grpc.CallOption) (*GetConnectionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectionListResponse)
	err := c.cc.Invoke(ctx, Dekart_GetConnectionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestConnectionResponse)
	err := c.cc.Invoke(ctx, Dekart_TestConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) SetDefaultConnection(ctx context.Context, in *SetDefaultConnectionRequest, opts ...grpc.CallOption) (*SetDefaultConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultConnectionResponse)
	err := c.cc.Invoke(ctx, Dekart_SetDefaultConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetWherobotsConnectionHint(ctx context.Context, in *GetWherobotsConnectionHintRequest, opts ...grpc.CallOption) (*GetWherobotsConnectionHintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWherobotsConnectionHintResponse)
	err := c.cc.Invoke(ctx, Dekart_GetWherobotsConnectionHint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) RespondToInvite(ctx context.Context, in *RespondToInviteRequest, opts ...grpc.CallOption) (*RespondToInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondToInviteResponse)
	err := c.cc.Invoke(ctx, Dekart_RespondToInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetStripePortalSession(ctx context.Context, in *GetStripePortalSessionRequest, opts ...grpc.CallOption) (*GetStripePortalSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStripePortalSessionResponse)
	err := c.cc.Invoke(ctx, Dekart_GetStripePortalSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, Dekart_CreateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkspaceResponse)
	err := c.cc.Invoke(ctx, Dekart_UpdateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, Dekart_GetWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dekartClient) UpdateWorkspaceUser(ctx context.Context, in *UpdateWorkspaceUserRequest, opts ...grpc.CallOption) (*UpdateWorkspaceUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkspaceUserResponse)
	err := c.cc.Invoke(ctx, Dekart_UpdateWorkspaceUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DekartServer is the server API for Dekart service.
// All implementations must embed UnimplementedDekartServer
// for forward compatibility.
type DekartServer interface {
	// reports
	CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error)
	ForkReport(context.Context, *ForkReportRequest) (*ForkReportResponse, error)
	UpdateReport(context.Context, *UpdateReportRequest) (*UpdateReportResponse, error)
	ArchiveReport(context.Context, *ArchiveReportRequest) (*ArchiveReportResponse, error)
	SetDiscoverable(context.Context, *SetDiscoverableRequest) (*SetDiscoverableResponse, error)
	PublishReport(context.Context, *PublishReportRequest) (*PublishReportResponse, error)
	AllowExportDatasets(context.Context, *AllowExportDatasetsRequest) (*AllowExportDatasetsResponse, error)
	AddReadme(context.Context, *AddReadmeRequest) (*AddReadmeResponse, error)
	RemoveReadme(context.Context, *RemoveReadmeRequest) (*RemoveReadmeResponse, error)
	AddReportDirectAccess(context.Context, *AddReportDirectAccessRequest) (*AddReportDirectAccessResponse, error)
	SetTrackViewers(context.Context, *SetTrackViewersRequest) (*SetTrackViewersResponse, error)
	// datasets
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	RemoveDataset(context.Context, *RemoveDatasetRequest) (*RemoveDatasetResponse, error)
	UpdateDatasetName(context.Context, *UpdateDatasetNameRequest) (*UpdateDatasetNameResponse, error)
	UpdateDatasetConnection(context.Context, *UpdateDatasetConnectionRequest) (*UpdateDatasetConnectionResponse, error)
	// files
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	// queries
	CreateQuery(context.Context, *CreateQueryRequest) (*CreateQueryResponse, error)
	RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error)
	RunAllQueries(context.Context, *RunAllQueriesRequest) (*RunAllQueriesResponse, error)
	// jobs
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	GetEnv(context.Context, *GetEnvRequest) (*GetEnvResponse, error)
	// streams
	GetReportStream(*ReportStreamRequest, grpc.ServerStreamingServer[ReportStreamResponse]) error
	GetReportListStream(*ReportListRequest, grpc.ServerStreamingServer[ReportListResponse]) error
	GetUserStream(*GetUserStreamRequest, grpc.ServerStreamingServer[GetUserStreamResponse]) error
	// statistics
	GetUsage(context.Context, *GetUsageRequest) (*GetUsageResponse, error)
	GetReportAnalytics(context.Context, *GetReportAnalyticsRequest) (*GetReportAnalyticsResponse, error)
	// connections
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	GetGcpProjectList(context.Context, *GetGcpProjectListRequest) (*GetGcpProjectListResponse, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	ArchiveConnection(context.Context, *ArchiveConnectionRequest) (*ArchiveConnectionResponse, error)
	GetConnectionList(context.Context, *GetConnectionListRequest) (*GetConnectionListResponse, error)
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error)
	SetDefaultConnection(context.Context, *SetDefaultConnectionRequest) (*SetDefaultConnectionResponse, error)
	GetWherobotsConnectionHint(context.Context, *GetWherobotsConnectionHintRequest) (*GetWherobotsConnectionHintResponse, error)
	// user
	RespondToInvite(context.Context, *RespondToInviteRequest) (*RespondToInviteResponse, error)
	// subscriptions
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	GetStripePortalSession(context.Context, *GetStripePortalSessionRequest) (*GetStripePortalSessionResponse, error)
	// workspace
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error)
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	UpdateWorkspaceUser(context.Context, *UpdateWorkspaceUserRequest) (*UpdateWorkspaceUserResponse, error)
	mustEmbedUnimplementedDekartServer()
}

// UnimplementedDekartServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDekartServer struct{}

func (UnimplementedDekartServer) CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedDekartServer) ForkReport(context.Context, *ForkReportRequest) (*ForkReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForkReport not implemented")
}
func (UnimplementedDekartServer) UpdateReport(context.Context, *UpdateReportRequest) (*UpdateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReport not implemented")
}
func (UnimplementedDekartServer) ArchiveReport(context.Context, *ArchiveReportRequest) (*ArchiveReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveReport not implemented")
}
func (UnimplementedDekartServer) SetDiscoverable(context.Context, *SetDiscoverableRequest) (*SetDiscoverableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDiscoverable not implemented")
}
func (UnimplementedDekartServer) PublishReport(context.Context, *PublishReportRequest) (*PublishReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishReport not implemented")
}
func (UnimplementedDekartServer) AllowExportDatasets(context.Context, *AllowExportDatasetsRequest) (*AllowExportDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowExportDatasets not implemented")
}
func (UnimplementedDekartServer) AddReadme(context.Context, *AddReadmeRequest) (*AddReadmeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReadme not implemented")
}
func (UnimplementedDekartServer) RemoveReadme(context.Context, *RemoveReadmeRequest) (*RemoveReadmeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReadme not implemented")
}
func (UnimplementedDekartServer) AddReportDirectAccess(context.Context, *AddReportDirectAccessRequest) (*AddReportDirectAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReportDirectAccess not implemented")
}
func (UnimplementedDekartServer) SetTrackViewers(context.Context, *SetTrackViewersRequest) (*SetTrackViewersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrackViewers not implemented")
}
func (UnimplementedDekartServer) CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDekartServer) RemoveDataset(context.Context, *RemoveDatasetRequest) (*RemoveDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDataset not implemented")
}
func (UnimplementedDekartServer) UpdateDatasetName(context.Context, *UpdateDatasetNameRequest) (*UpdateDatasetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetName not implemented")
}
func (UnimplementedDekartServer) UpdateDatasetConnection(context.Context, *UpdateDatasetConnectionRequest) (*UpdateDatasetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetConnection not implemented")
}
func (UnimplementedDekartServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedDekartServer) CreateQuery(context.Context, *CreateQueryRequest) (*CreateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedDekartServer) RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}
func (UnimplementedDekartServer) RunAllQueries(context.Context, *RunAllQueriesRequest) (*RunAllQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAllQueries not implemented")
}
func (UnimplementedDekartServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedDekartServer) GetEnv(context.Context, *GetEnvRequest) (*GetEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedDekartServer) GetReportStream(*ReportStreamRequest, grpc.ServerStreamingServer[ReportStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetReportStream not implemented")
}
func (UnimplementedDekartServer) GetReportListStream(*ReportListRequest, grpc.ServerStreamingServer[ReportListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetReportListStream not implemented")
}
func (UnimplementedDekartServer) GetUserStream(*GetUserStreamRequest, grpc.ServerStreamingServer[GetUserStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserStream not implemented")
}
func (UnimplementedDekartServer) GetUsage(context.Context, *GetUsageRequest) (*GetUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsage not implemented")
}
func (UnimplementedDekartServer) GetReportAnalytics(context.Context, *GetReportAnalyticsRequest) (*GetReportAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportAnalytics not implemented")
}
func (UnimplementedDekartServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedDekartServer) GetGcpProjectList(context.Context, *GetGcpProjectListRequest) (*GetGcpProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGcpProjectList not implemented")
}
func (UnimplementedDekartServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedDekartServer) ArchiveConnection(context.Context, *ArchiveConnectionRequest) (*ArchiveConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveConnection not implemented")
}
func (UnimplementedDekartServer) GetConnectionList(context.Context, *GetConnectionListRequest) (*GetConnectionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionList not implemented")
}
func (UnimplementedDekartServer) TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedDekartServer) SetDefaultConnection(context.Context, *SetDefaultConnectionRequest) (*SetDefaultConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConnection not implemented")
}
func (UnimplementedDekartServer) GetWherobotsConnectionHint(context.Context, *GetWherobotsConnectionHintRequest) (*GetWherobotsConnectionHintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWherobotsConnectionHint not implemented")
}
func (UnimplementedDekartServer) RespondToInvite(context.Context, *RespondToInviteRequest) (*RespondToInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondToInvite not implemented")
}
func (UnimplementedDekartServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedDekartServer) GetStripePortalSession(context.Context, *GetStripePortalSessionRequest) (*GetStripePortalSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStripePortalSession not implemented")
}
func (UnimplementedDekartServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedDekartServer) UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedDekartServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedDekartServer) UpdateWorkspaceUser(context.Context, *UpdateWorkspaceUserRequest) (*UpdateWorkspaceUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspaceUser not implemented")
}
func (UnimplementedDekartServer) mustEmbedUnimplementedDekartServer() {}
func (UnimplementedDekartServer) testEmbeddedByValue()                {}

// UnsafeDekartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DekartServer will
// result in compilation errors.
type UnsafeDekartServer interface {
	mustEmbedUnimplementedDekartServer()
}

func RegisterDekartServer(s grpc.ServiceRegistrar, srv DekartServer) {
	// If the following call pancis, it indicates UnimplementedDekartServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dekart_ServiceDesc, srv)
}

func _Dekart_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_ForkReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).ForkReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_ForkReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).ForkReport(ctx, req.(*ForkReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_UpdateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).UpdateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_UpdateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).UpdateReport(ctx, req.(*UpdateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_ArchiveReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).ArchiveReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_ArchiveReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).ArchiveReport(ctx, req.(*ArchiveReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_SetDiscoverable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDiscoverableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).SetDiscoverable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_SetDiscoverable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).SetDiscoverable(ctx, req.(*SetDiscoverableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_PublishReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).PublishReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_PublishReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).PublishReport(ctx, req.(*PublishReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_AllowExportDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowExportDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).AllowExportDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_AllowExportDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).AllowExportDatasets(ctx, req.(*AllowExportDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_AddReadme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReadmeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).AddReadme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_AddReadme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).AddReadme(ctx, req.(*AddReadmeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_RemoveReadme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReadmeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).RemoveReadme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_RemoveReadme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).RemoveReadme(ctx, req.(*RemoveReadmeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_AddReportDirectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReportDirectAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).AddReportDirectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_AddReportDirectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).AddReportDirectAccess(ctx, req.(*AddReportDirectAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_SetTrackViewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrackViewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).SetTrackViewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_SetTrackViewers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).SetTrackViewers(ctx, req.(*SetTrackViewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_RemoveDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).RemoveDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_RemoveDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).RemoveDataset(ctx, req.(*RemoveDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_UpdateDatasetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).UpdateDatasetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_UpdateDatasetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).UpdateDatasetName(ctx, req.(*UpdateDatasetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_UpdateDatasetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).UpdateDatasetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_UpdateDatasetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).UpdateDatasetConnection(ctx, req.(*UpdateDatasetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CreateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateQuery(ctx, req.(*CreateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_RunQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).RunQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_RunQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).RunQuery(ctx, req.(*RunQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_RunAllQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAllQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).RunAllQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_RunAllQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).RunAllQueries(ctx, req.(*RunAllQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetEnv(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetReportStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DekartServer).GetReportStream(m, &grpc.GenericServerStream[ReportStreamRequest, ReportStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dekart_GetReportStreamServer = grpc.ServerStreamingServer[ReportStreamResponse]

func _Dekart_GetReportListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DekartServer).GetReportListStream(m, &grpc.GenericServerStream[ReportListRequest, ReportListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dekart_GetReportListStreamServer = grpc.ServerStreamingServer[ReportListResponse]

func _Dekart_GetUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DekartServer).GetUserStream(m, &grpc.GenericServerStream[GetUserStreamRequest, GetUserStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dekart_GetUserStreamServer = grpc.ServerStreamingServer[GetUserStreamResponse]

func _Dekart_GetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetUsage(ctx, req.(*GetUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetReportAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetReportAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetReportAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetReportAnalytics(ctx, req.(*GetReportAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetGcpProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGcpProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetGcpProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetGcpProjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetGcpProjectList(ctx, req.(*GetGcpProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_UpdateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_ArchiveConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).ArchiveConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_ArchiveConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).ArchiveConnection(ctx, req.(*ArchiveConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetConnectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetConnectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetConnectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetConnectionList(ctx, req.(*GetConnectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_TestConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_SetDefaultConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).SetDefaultConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_SetDefaultConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).SetDefaultConnection(ctx, req.(*SetDefaultConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetWherobotsConnectionHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWherobotsConnectionHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetWherobotsConnectionHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetWherobotsConnectionHint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetWherobotsConnectionHint(ctx, req.(*GetWherobotsConnectionHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_RespondToInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondToInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).RespondToInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_RespondToInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).RespondToInvite(ctx, req.(*RespondToInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetStripePortalSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStripePortalSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetStripePortalSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetStripePortalSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetStripePortalSession(ctx, req.(*GetStripePortalSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_UpdateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).UpdateWorkspace(ctx, req.(*UpdateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_GetWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dekart_UpdateWorkspaceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DekartServer).UpdateWorkspaceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dekart_UpdateWorkspaceUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DekartServer).UpdateWorkspaceUser(ctx, req.(*UpdateWorkspaceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dekart_ServiceDesc is the grpc.ServiceDesc for Dekart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dekart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dekart",
	HandlerType: (*DekartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReport",
			Handler:    _Dekart_CreateReport_Handler,
		},
		{
			MethodName: "ForkReport",
			Handler:    _Dekart_ForkReport_Handler,
		},
		{
			MethodName: "UpdateReport",
			Handler:    _Dekart_UpdateReport_Handler,
		},
		{
			MethodName: "ArchiveReport",
			Handler:    _Dekart_ArchiveReport_Handler,
		},
		{
			MethodName: "SetDiscoverable",
			Handler:    _Dekart_SetDiscoverable_Handler,
		},
		{
			MethodName: "PublishReport",
			Handler:    _Dekart_PublishReport_Handler,
		},
		{
			MethodName: "AllowExportDatasets",
			Handler:    _Dekart_AllowExportDatasets_Handler,
		},
		{
			MethodName: "AddReadme",
			Handler:    _Dekart_AddReadme_Handler,
		},
		{
			MethodName: "RemoveReadme",
			Handler:    _Dekart_RemoveReadme_Handler,
		},
		{
			MethodName: "AddReportDirectAccess",
			Handler:    _Dekart_AddReportDirectAccess_Handler,
		},
		{
			MethodName: "SetTrackViewers",
			Handler:    _Dekart_SetTrackViewers_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _Dekart_CreateDataset_Handler,
		},
		{
			MethodName: "RemoveDataset",
			Handler:    _Dekart_RemoveDataset_Handler,
		},
		{
			MethodName: "UpdateDatasetName",
			Handler:    _Dekart_UpdateDatasetName_Handler,
		},
		{
			MethodName: "UpdateDatasetConnection",
			Handler:    _Dekart_UpdateDatasetConnection_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _Dekart_CreateFile_Handler,
		},
		{
			MethodName: "CreateQuery",
			Handler:    _Dekart_CreateQuery_Handler,
		},
		{
			MethodName: "RunQuery",
			Handler:    _Dekart_RunQuery_Handler,
		},
		{
			MethodName: "RunAllQueries",
			Handler:    _Dekart_RunAllQueries_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Dekart_CancelJob_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _Dekart_GetEnv_Handler,
		},
		{
			MethodName: "GetUsage",
			Handler:    _Dekart_GetUsage_Handler,
		},
		{
			MethodName: "GetReportAnalytics",
			Handler:    _Dekart_GetReportAnalytics_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _Dekart_CreateConnection_Handler,
		},
		{
			MethodName: "GetGcpProjectList",
			Handler:    _Dekart_GetGcpProjectList_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _Dekart_UpdateConnection_Handler,
		},
		{
			MethodName: "ArchiveConnection",
			Handler:    _Dekart_ArchiveConnection_Handler,
		},
		{
			MethodName: "GetConnectionList",
			Handler:    _Dekart_GetConnectionList_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _Dekart_TestConnection_Handler,
		},
		{
			MethodName: "SetDefaultConnection",
			Handler:    _Dekart_SetDefaultConnection_Handler,
		},
		{
			MethodName: "GetWherobotsConnectionHint",
			Handler:    _Dekart_GetWherobotsConnectionHint_Handler,
		},
		{
			MethodName: "RespondToInvite",
			Handler:    _Dekart_RespondToInvite_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _Dekart_CreateSubscription_Handler,
		},
		{
			MethodName: "GetStripePortalSession",
			Handler:    _Dekart_GetStripePortalSession_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _Dekart_CreateWorkspace_Handler,
		},
		{
			MethodName: "UpdateWorkspace",
			Handler:    _Dekart_UpdateWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _Dekart_GetWorkspace_Handler,
		},
		{
			MethodName: "UpdateWorkspaceUser",
			Handler:    _Dekart_UpdateWorkspaceUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReportStream",
			Handler:       _Dekart_GetReportStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReportListStream",
			Handler:       _Dekart_GetReportListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserStream",
			Handler:       _Dekart_GetUserStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/dekart.proto",
}
