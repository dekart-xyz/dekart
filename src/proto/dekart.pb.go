// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.14.0
// source: proto/dekart.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserStatus int32

const (
	UserStatus_USER_STATUS_UNSPECIFIED UserStatus = 0
	UserStatus_USER_STATUS_PENDING     UserStatus = 1
	UserStatus_USER_STATUS_ACTIVE      UserStatus = 2
	UserStatus_USER_STATUS_REMOVED     UserStatus = 3
	UserStatus_USER_STATUS_REJECTED    UserStatus = 4
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_UNSPECIFIED",
		1: "USER_STATUS_PENDING",
		2: "USER_STATUS_ACTIVE",
		3: "USER_STATUS_REMOVED",
		4: "USER_STATUS_REJECTED",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_UNSPECIFIED": 0,
		"USER_STATUS_PENDING":     1,
		"USER_STATUS_ACTIVE":      2,
		"USER_STATUS_REMOVED":     3,
		"USER_STATUS_REJECTED":    4,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[0].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[0]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{0}
}

type UserRole int32

const (
	UserRole_ROLE_UNSPECIFIED UserRole = 0
	UserRole_ROLE_ADMIN       UserRole = 1
	UserRole_ROLE_EDITOR      UserRole = 2
	UserRole_ROLE_VIEWER      UserRole = 3
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "ROLE_ADMIN",
		2: "ROLE_EDITOR",
		3: "ROLE_VIEWER",
	}
	UserRole_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"ROLE_ADMIN":       1,
		"ROLE_EDITOR":      2,
		"ROLE_VIEWER":      3,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[1].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[1]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{1}
}

type PlanType int32

const (
	PlanType_TYPE_UNSPECIFIED PlanType = 0
	PlanType_TYPE_PERSONAL    PlanType = 1
	PlanType_TYPE_TEAM        PlanType = 2
	PlanType_TYPE_GROW        PlanType = 3
	PlanType_TYPE_MAX         PlanType = 4
	PlanType_TYPE_SELF_HOSTED PlanType = 5
)

// Enum value maps for PlanType.
var (
	PlanType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_PERSONAL",
		2: "TYPE_TEAM",
		3: "TYPE_GROW",
		4: "TYPE_MAX",
		5: "TYPE_SELF_HOSTED",
	}
	PlanType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_PERSONAL":    1,
		"TYPE_TEAM":        2,
		"TYPE_GROW":        3,
		"TYPE_MAX":         4,
		"TYPE_SELF_HOSTED": 5,
	}
)

func (x PlanType) Enum() *PlanType {
	p := new(PlanType)
	*p = x
	return p
}

func (x PlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[2].Descriptor()
}

func (PlanType) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[2]
}

func (x PlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanType.Descriptor instead.
func (PlanType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{2}
}

type ConnectionType int32

const (
	ConnectionType_CONNECTION_TYPE_UNSPECIFIED ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_BIGQUERY    ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_SNOWFLAKE   ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_WHEROBOTS   ConnectionType = 3
	ConnectionType_CONNECTION_TYPE_ATHENA      ConnectionType = 4
	ConnectionType_CONNECTION_TYPE_POSTGRES    ConnectionType = 5
	ConnectionType_CONNECTION_TYPE_CLICKHOUSE  ConnectionType = 6
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_BIGQUERY",
		2: "CONNECTION_TYPE_SNOWFLAKE",
		3: "CONNECTION_TYPE_WHEROBOTS",
		4: "CONNECTION_TYPE_ATHENA",
		5: "CONNECTION_TYPE_POSTGRES",
		6: "CONNECTION_TYPE_CLICKHOUSE",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_BIGQUERY":    1,
		"CONNECTION_TYPE_SNOWFLAKE":   2,
		"CONNECTION_TYPE_WHEROBOTS":   3,
		"CONNECTION_TYPE_ATHENA":      4,
		"CONNECTION_TYPE_POSTGRES":    5,
		"CONNECTION_TYPE_CLICKHOUSE":  6,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[3].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[3]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{3}
}

type UpdateWorkspaceUserRequest_UserUpdateType int32

const (
	UpdateWorkspaceUserRequest_USER_UPDATE_TYPE_UNSPECIFIED UpdateWorkspaceUserRequest_UserUpdateType = 0
	UpdateWorkspaceUserRequest_USER_UPDATE_TYPE_ADD         UpdateWorkspaceUserRequest_UserUpdateType = 1
	UpdateWorkspaceUserRequest_USER_UPDATE_TYPE_REMOVE      UpdateWorkspaceUserRequest_UserUpdateType = 2
	UpdateWorkspaceUserRequest_USER_UPDATE_TYPE_UPDATE      UpdateWorkspaceUserRequest_UserUpdateType = 3
)

// Enum value maps for UpdateWorkspaceUserRequest_UserUpdateType.
var (
	UpdateWorkspaceUserRequest_UserUpdateType_name = map[int32]string{
		0: "USER_UPDATE_TYPE_UNSPECIFIED",
		1: "USER_UPDATE_TYPE_ADD",
		2: "USER_UPDATE_TYPE_REMOVE",
		3: "USER_UPDATE_TYPE_UPDATE",
	}
	UpdateWorkspaceUserRequest_UserUpdateType_value = map[string]int32{
		"USER_UPDATE_TYPE_UNSPECIFIED": 0,
		"USER_UPDATE_TYPE_ADD":         1,
		"USER_UPDATE_TYPE_REMOVE":      2,
		"USER_UPDATE_TYPE_UPDATE":      3,
	}
)

func (x UpdateWorkspaceUserRequest_UserUpdateType) Enum() *UpdateWorkspaceUserRequest_UserUpdateType {
	p := new(UpdateWorkspaceUserRequest_UserUpdateType)
	*p = x
	return p
}

func (x UpdateWorkspaceUserRequest_UserUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateWorkspaceUserRequest_UserUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[4].Descriptor()
}

func (UpdateWorkspaceUserRequest_UserUpdateType) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[4]
}

func (x UpdateWorkspaceUserRequest_UserUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateWorkspaceUserRequest_UserUpdateType.Descriptor instead.
func (UpdateWorkspaceUserRequest_UserUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{18, 0}
}

type GetEnvResponse_Variable_Type int32

const (
	GetEnvResponse_Variable_TYPE_UNSPECIFIED                  GetEnvResponse_Variable_Type = 0
	GetEnvResponse_Variable_TYPE_MAPBOX_TOKEN                 GetEnvResponse_Variable_Type = 1
	GetEnvResponse_Variable_TYPE_UX_DATA_DOCUMENTATION        GetEnvResponse_Variable_Type = 2
	GetEnvResponse_Variable_TYPE_UX_HOMEPAGE                  GetEnvResponse_Variable_Type = 3
	GetEnvResponse_Variable_TYPE_ALLOW_FILE_UPLOAD            GetEnvResponse_Variable_Type = 4
	GetEnvResponse_Variable_TYPE_DATASOURCE                   GetEnvResponse_Variable_Type = 5
	GetEnvResponse_Variable_TYPE_STORAGE                      GetEnvResponse_Variable_Type = 6
	GetEnvResponse_Variable_TYPE_REQUIRE_AMAZON_OIDC          GetEnvResponse_Variable_Type = 7
	GetEnvResponse_Variable_TYPE_REQUIRE_IAP                  GetEnvResponse_Variable_Type = 8
	GetEnvResponse_Variable_TYPE_DISABLE_USAGE_STATS          GetEnvResponse_Variable_Type = 9
	GetEnvResponse_Variable_TYPE_REQUIRE_GOOGLE_OAUTH         GetEnvResponse_Variable_Type = 10
	GetEnvResponse_Variable_TYPE_BIGQUERY_PROJECT_ID          GetEnvResponse_Variable_Type = 11
	GetEnvResponse_Variable_TYPE_CLOUD_STORAGE_BUCKET         GetEnvResponse_Variable_Type = 12
	GetEnvResponse_Variable_TYPE_UX_ACCESS_ERROR_INFO_HTML    GetEnvResponse_Variable_Type = 13
	GetEnvResponse_Variable_TYPE_UX_NOT_FOUND_ERROR_INFO_HTML GetEnvResponse_Variable_Type = 14
	GetEnvResponse_Variable_TYPE_UX_SAMPLE_QUERY_SQL          GetEnvResponse_Variable_Type = 15
	GetEnvResponse_Variable_TYPE_AES_KEY                      GetEnvResponse_Variable_Type = 16
	GetEnvResponse_Variable_TYPE_AES_IV                       GetEnvResponse_Variable_Type = 17
	GetEnvResponse_Variable_TYPE_AUTH_ENABLED                 GetEnvResponse_Variable_Type = 18
	GetEnvResponse_Variable_TYPE_USER_DEFINED_CONNECTION      GetEnvResponse_Variable_Type = 19
	GetEnvResponse_Variable_TYPE_UX_DISABLE_VERSION_CHECK     GetEnvResponse_Variable_Type = 20
	GetEnvResponse_Variable_TYPE_ALLOW_WORKSPACE_CREATION     GetEnvResponse_Variable_Type = 21
	GetEnvResponse_Variable_TYPE_WORKSPACE_DEFAULT_ROLE       GetEnvResponse_Variable_Type = 22
	GetEnvResponse_Variable_TYPE_SECRETS_ENABLED              GetEnvResponse_Variable_Type = 23
	GetEnvResponse_Variable_TYPE_CLOUD_UX_CONFIG_JSON         GetEnvResponse_Variable_Type = 24
	GetEnvResponse_Variable_TYPE_DEKART_CLOUD                 GetEnvResponse_Variable_Type = 25
)

// Enum value maps for GetEnvResponse_Variable_Type.
var (
	GetEnvResponse_Variable_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_MAPBOX_TOKEN",
		2:  "TYPE_UX_DATA_DOCUMENTATION",
		3:  "TYPE_UX_HOMEPAGE",
		4:  "TYPE_ALLOW_FILE_UPLOAD",
		5:  "TYPE_DATASOURCE",
		6:  "TYPE_STORAGE",
		7:  "TYPE_REQUIRE_AMAZON_OIDC",
		8:  "TYPE_REQUIRE_IAP",
		9:  "TYPE_DISABLE_USAGE_STATS",
		10: "TYPE_REQUIRE_GOOGLE_OAUTH",
		11: "TYPE_BIGQUERY_PROJECT_ID",
		12: "TYPE_CLOUD_STORAGE_BUCKET",
		13: "TYPE_UX_ACCESS_ERROR_INFO_HTML",
		14: "TYPE_UX_NOT_FOUND_ERROR_INFO_HTML",
		15: "TYPE_UX_SAMPLE_QUERY_SQL",
		16: "TYPE_AES_KEY",
		17: "TYPE_AES_IV",
		18: "TYPE_AUTH_ENABLED",
		19: "TYPE_USER_DEFINED_CONNECTION",
		20: "TYPE_UX_DISABLE_VERSION_CHECK",
		21: "TYPE_ALLOW_WORKSPACE_CREATION",
		22: "TYPE_WORKSPACE_DEFAULT_ROLE",
		23: "TYPE_SECRETS_ENABLED",
		24: "TYPE_CLOUD_UX_CONFIG_JSON",
		25: "TYPE_DEKART_CLOUD",
	}
	GetEnvResponse_Variable_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                  0,
		"TYPE_MAPBOX_TOKEN":                 1,
		"TYPE_UX_DATA_DOCUMENTATION":        2,
		"TYPE_UX_HOMEPAGE":                  3,
		"TYPE_ALLOW_FILE_UPLOAD":            4,
		"TYPE_DATASOURCE":                   5,
		"TYPE_STORAGE":                      6,
		"TYPE_REQUIRE_AMAZON_OIDC":          7,
		"TYPE_REQUIRE_IAP":                  8,
		"TYPE_DISABLE_USAGE_STATS":          9,
		"TYPE_REQUIRE_GOOGLE_OAUTH":         10,
		"TYPE_BIGQUERY_PROJECT_ID":          11,
		"TYPE_CLOUD_STORAGE_BUCKET":         12,
		"TYPE_UX_ACCESS_ERROR_INFO_HTML":    13,
		"TYPE_UX_NOT_FOUND_ERROR_INFO_HTML": 14,
		"TYPE_UX_SAMPLE_QUERY_SQL":          15,
		"TYPE_AES_KEY":                      16,
		"TYPE_AES_IV":                       17,
		"TYPE_AUTH_ENABLED":                 18,
		"TYPE_USER_DEFINED_CONNECTION":      19,
		"TYPE_UX_DISABLE_VERSION_CHECK":     20,
		"TYPE_ALLOW_WORKSPACE_CREATION":     21,
		"TYPE_WORKSPACE_DEFAULT_ROLE":       22,
		"TYPE_SECRETS_ENABLED":              23,
		"TYPE_CLOUD_UX_CONFIG_JSON":         24,
		"TYPE_DEKART_CLOUD":                 25,
	}
)

func (x GetEnvResponse_Variable_Type) Enum() *GetEnvResponse_Variable_Type {
	p := new(GetEnvResponse_Variable_Type)
	*p = x
	return p
}

func (x GetEnvResponse_Variable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEnvResponse_Variable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[5].Descriptor()
}

func (GetEnvResponse_Variable_Type) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[5]
}

func (x GetEnvResponse_Variable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEnvResponse_Variable_Type.Descriptor instead.
func (GetEnvResponse_Variable_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{64, 0, 0}
}

type AuthState_Action int32

const (
	AuthState_ACTION_UNSPECIFIED   AuthState_Action = 0
	AuthState_ACTION_REQUEST_CODE  AuthState_Action = 1 // request auth code from Google OAuth (invoked by UI)
	AuthState_ACTION_REQUEST_TOKEN AuthState_Action = 2 // request access token from Google OAuth (used as callback from Google OAuth)
	AuthState_ACTION_REVOKE        AuthState_Action = 3 // revoke access token (invoked by UI)
)

// Enum value maps for AuthState_Action.
var (
	AuthState_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_REQUEST_CODE",
		2: "ACTION_REQUEST_TOKEN",
		3: "ACTION_REVOKE",
	}
	AuthState_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":   0,
		"ACTION_REQUEST_CODE":  1,
		"ACTION_REQUEST_TOKEN": 2,
		"ACTION_REVOKE":        3,
	}
)

func (x AuthState_Action) Enum() *AuthState_Action {
	p := new(AuthState_Action)
	*p = x
	return p
}

func (x AuthState_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthState_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[6].Descriptor()
}

func (AuthState_Action) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[6]
}

func (x AuthState_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthState_Action.Descriptor instead.
func (AuthState_Action) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{66, 0}
}

type QueryJob_JobStatus int32

const (
	QueryJob_JOB_STATUS_UNSPECIFIED     QueryJob_JobStatus = 0
	QueryJob_JOB_STATUS_PENDING         QueryJob_JobStatus = 1
	QueryJob_JOB_STATUS_RUNNING         QueryJob_JobStatus = 2
	QueryJob_JOB_STATUS_DONE_LEGACY     QueryJob_JobStatus = 3 // legacy for backwards compatibility
	QueryJob_JOB_STATUS_READING_RESULTS QueryJob_JobStatus = 4 // job is done processing results
	QueryJob_JOB_STATUS_DONE            QueryJob_JobStatus = 5
)

// Enum value maps for QueryJob_JobStatus.
var (
	QueryJob_JobStatus_name = map[int32]string{
		0: "JOB_STATUS_UNSPECIFIED",
		1: "JOB_STATUS_PENDING",
		2: "JOB_STATUS_RUNNING",
		3: "JOB_STATUS_DONE_LEGACY",
		4: "JOB_STATUS_READING_RESULTS",
		5: "JOB_STATUS_DONE",
	}
	QueryJob_JobStatus_value = map[string]int32{
		"JOB_STATUS_UNSPECIFIED":     0,
		"JOB_STATUS_PENDING":         1,
		"JOB_STATUS_RUNNING":         2,
		"JOB_STATUS_DONE_LEGACY":     3,
		"JOB_STATUS_READING_RESULTS": 4,
		"JOB_STATUS_DONE":            5,
	}
)

func (x QueryJob_JobStatus) Enum() *QueryJob_JobStatus {
	p := new(QueryJob_JobStatus)
	*p = x
	return p
}

func (x QueryJob_JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryJob_JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[7].Descriptor()
}

func (QueryJob_JobStatus) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[7]
}

func (x QueryJob_JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryJob_JobStatus.Descriptor instead.
func (QueryJob_JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{75, 0}
}

type Query_QuerySource int32

const (
	Query_QUERY_SOURCE_UNSPECIFIED Query_QuerySource = 0
	Query_QUERY_SOURCE_INLINE      Query_QuerySource = 1
	Query_QUERY_SOURCE_STORAGE     Query_QuerySource = 2
)

// Enum value maps for Query_QuerySource.
var (
	Query_QuerySource_name = map[int32]string{
		0: "QUERY_SOURCE_UNSPECIFIED",
		1: "QUERY_SOURCE_INLINE",
		2: "QUERY_SOURCE_STORAGE",
	}
	Query_QuerySource_value = map[string]int32{
		"QUERY_SOURCE_UNSPECIFIED": 0,
		"QUERY_SOURCE_INLINE":      1,
		"QUERY_SOURCE_STORAGE":     2,
	}
)

func (x Query_QuerySource) Enum() *Query_QuerySource {
	p := new(Query_QuerySource)
	*p = x
	return p
}

func (x Query_QuerySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_QuerySource) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[8].Descriptor()
}

func (Query_QuerySource) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[8]
}

func (x Query_QuerySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_QuerySource.Descriptor instead.
func (Query_QuerySource) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{76, 0}
}

type File_Status int32

const (
	File_STATUS_UNSPECIFIED File_Status = 0
	File_STATUS_NEW         File_Status = 1 // default initial state
	File_STATUS_RECEIVED    File_Status = 2 // file uploaded by user to temp storage
	File_STATUS_STORED      File_Status = 3 // file stored in permanent storage
)

// Enum value maps for File_Status.
var (
	File_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NEW",
		2: "STATUS_RECEIVED",
		3: "STATUS_STORED",
	}
	File_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_NEW":         1,
		"STATUS_RECEIVED":    2,
		"STATUS_STORED":      3,
	}
)

func (x File_Status) Enum() *File_Status {
	p := new(File_Status)
	*p = x
	return p
}

func (x File_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (File_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[9].Descriptor()
}

func (File_Status) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[9]
}

func (x File_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use File_Status.Descriptor instead.
func (File_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{77, 0}
}

type QueryParam_Type int32

const (
	QueryParam_TYPE_UNSPECIFIED QueryParam_Type = 0
	QueryParam_TYPE_STRING      QueryParam_Type = 1
)

// Enum value maps for QueryParam_Type.
var (
	QueryParam_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_STRING",
	}
	QueryParam_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_STRING":      1,
	}
)

func (x QueryParam_Type) Enum() *QueryParam_Type {
	p := new(QueryParam_Type)
	*p = x
	return p
}

func (x QueryParam_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryParam_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dekart_proto_enumTypes[10].Descriptor()
}

func (QueryParam_Type) Type() protoreflect.EnumType {
	return &file_proto_dekart_proto_enumTypes[10]
}

func (x QueryParam_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryParam_Type.Descriptor instead.
func (QueryParam_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{98, 0}
}

type GetWherobotsConnectionHintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WherobotsHost string  `protobuf:"bytes,18,opt,name=wherobots_host,json=wherobotsHost,proto3" json:"wherobots_host,omitempty"`
	WherobotsKey  *Secret `protobuf:"bytes,19,opt,name=wherobots_key,json=wherobotsKey,proto3" json:"wherobots_key,omitempty"`
}

func (x *GetWherobotsConnectionHintRequest) Reset() {
	*x = GetWherobotsConnectionHintRequest{}
	mi := &file_proto_dekart_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWherobotsConnectionHintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWherobotsConnectionHintRequest) ProtoMessage() {}

func (x *GetWherobotsConnectionHintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWherobotsConnectionHintRequest.ProtoReflect.Descriptor instead.
func (*GetWherobotsConnectionHintRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{0}
}

func (x *GetWherobotsConnectionHintRequest) GetWherobotsHost() string {
	if x != nil {
		return x.WherobotsHost
	}
	return ""
}

func (x *GetWherobotsConnectionHintRequest) GetWherobotsKey() *Secret {
	if x != nil {
		return x.WherobotsKey
	}
	return nil
}

type GetWherobotsConnectionHintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HintJson string `protobuf:"bytes,1,opt,name=hint_json,json=hintJson,proto3" json:"hint_json,omitempty"` // hint for Wherobots connection
}

func (x *GetWherobotsConnectionHintResponse) Reset() {
	*x = GetWherobotsConnectionHintResponse{}
	mi := &file_proto_dekart_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWherobotsConnectionHintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWherobotsConnectionHintResponse) ProtoMessage() {}

func (x *GetWherobotsConnectionHintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWherobotsConnectionHintResponse.ProtoReflect.Descriptor instead.
func (*GetWherobotsConnectionHintResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{1}
}

func (x *GetWherobotsConnectionHintResponse) GetHintJson() string {
	if x != nil {
		return x.HintJson
	}
	return ""
}

type AddReportDirectAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string   `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Emails   []string `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"` // list of user emails to add direct access to the report
}

func (x *AddReportDirectAccessRequest) Reset() {
	*x = AddReportDirectAccessRequest{}
	mi := &file_proto_dekart_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReportDirectAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReportDirectAccessRequest) ProtoMessage() {}

func (x *AddReportDirectAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReportDirectAccessRequest.ProtoReflect.Descriptor instead.
func (*AddReportDirectAccessRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{2}
}

func (x *AddReportDirectAccessRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *AddReportDirectAccessRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

type AddReportDirectAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddReportDirectAccessResponse) Reset() {
	*x = AddReportDirectAccessResponse{}
	mi := &file_proto_dekart_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReportDirectAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReportDirectAccessResponse) ProtoMessage() {}

func (x *AddReportDirectAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReportDirectAccessResponse.ProtoReflect.Descriptor instead.
func (*AddReportDirectAccessResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{3}
}

type GetReportAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *GetReportAnalyticsRequest) Reset() {
	*x = GetReportAnalyticsRequest{}
	mi := &file_proto_dekart_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReportAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportAnalyticsRequest) ProtoMessage() {}

func (x *GetReportAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetReportAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{4}
}

func (x *GetReportAnalyticsRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type GetReportAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytics *ReportAnalytics `protobuf:"bytes,1,opt,name=analytics,proto3" json:"analytics,omitempty"`
}

func (x *GetReportAnalyticsResponse) Reset() {
	*x = GetReportAnalyticsResponse{}
	mi := &file_proto_dekart_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReportAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportAnalyticsResponse) ProtoMessage() {}

func (x *GetReportAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetReportAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{5}
}

func (x *GetReportAnalyticsResponse) GetAnalytics() *ReportAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

type AddReadmeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId      string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Markdown      string `protobuf:"bytes,2,opt,name=markdown,proto3" json:"markdown,omitempty"`
	FromDatasetId string `protobuf:"bytes,3,opt,name=from_dataset_id,json=fromDatasetId,proto3" json:"from_dataset_id,omitempty"` // dataset id to remove from report
}

func (x *AddReadmeRequest) Reset() {
	*x = AddReadmeRequest{}
	mi := &file_proto_dekart_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReadmeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadmeRequest) ProtoMessage() {}

func (x *AddReadmeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadmeRequest.ProtoReflect.Descriptor instead.
func (*AddReadmeRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{6}
}

func (x *AddReadmeRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *AddReadmeRequest) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

func (x *AddReadmeRequest) GetFromDatasetId() string {
	if x != nil {
		return x.FromDatasetId
	}
	return ""
}

type AddReadmeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddReadmeResponse) Reset() {
	*x = AddReadmeResponse{}
	mi := &file_proto_dekart_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReadmeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadmeResponse) ProtoMessage() {}

func (x *AddReadmeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadmeResponse.ProtoReflect.Descriptor instead.
func (*AddReadmeResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{7}
}

type RemoveReadmeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *RemoveReadmeRequest) Reset() {
	*x = RemoveReadmeRequest{}
	mi := &file_proto_dekart_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveReadmeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadmeRequest) ProtoMessage() {}

func (x *RemoveReadmeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadmeRequest.ProtoReflect.Descriptor instead.
func (*RemoveReadmeRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveReadmeRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type RemoveReadmeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveReadmeResponse) Reset() {
	*x = RemoveReadmeResponse{}
	mi := &file_proto_dekart_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveReadmeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadmeResponse) ProtoMessage() {}

func (x *RemoveReadmeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadmeResponse.ProtoReflect.Descriptor instead.
func (*RemoveReadmeResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{9}
}

type AllowExportDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId    string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	AllowExport bool   `protobuf:"varint,2,opt,name=allow_export,json=allowExport,proto3" json:"allow_export,omitempty"`
}

func (x *AllowExportDatasetsRequest) Reset() {
	*x = AllowExportDatasetsRequest{}
	mi := &file_proto_dekart_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowExportDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowExportDatasetsRequest) ProtoMessage() {}

func (x *AllowExportDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowExportDatasetsRequest.ProtoReflect.Descriptor instead.
func (*AllowExportDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{10}
}

func (x *AllowExportDatasetsRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *AllowExportDatasetsRequest) GetAllowExport() bool {
	if x != nil {
		return x.AllowExport
	}
	return false
}

type AllowExportDatasetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllowExportDatasetsResponse) Reset() {
	*x = AllowExportDatasetsResponse{}
	mi := &file_proto_dekart_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowExportDatasetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowExportDatasetsResponse) ProtoMessage() {}

func (x *AllowExportDatasetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowExportDatasetsResponse.ProtoReflect.Descriptor instead.
func (*AllowExportDatasetsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{11}
}

type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	mi := &file_proto_dekart_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{12}
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type CancelJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelJobResponse) Reset() {
	*x = CancelJobResponse{}
	mi := &file_proto_dekart_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobResponse) ProtoMessage() {}

func (x *CancelJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobResponse.ProtoReflect.Descriptor instead.
func (*CancelJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{13}
}

type PublishReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Publish  bool   `protobuf:"varint,2,opt,name=publish,proto3" json:"publish,omitempty"`
}

func (x *PublishReportRequest) Reset() {
	*x = PublishReportRequest{}
	mi := &file_proto_dekart_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishReportRequest) ProtoMessage() {}

func (x *PublishReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishReportRequest.ProtoReflect.Descriptor instead.
func (*PublishReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{14}
}

func (x *PublishReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *PublishReportRequest) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

type PublishReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishReportResponse) Reset() {
	*x = PublishReportResponse{}
	mi := &file_proto_dekart_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishReportResponse) ProtoMessage() {}

func (x *PublishReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishReportResponse.ProtoReflect.Descriptor instead.
func (*PublishReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{15}
}

type GetStripePortalSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UiUrl string `protobuf:"bytes,1,opt,name=ui_url,json=uiUrl,proto3" json:"ui_url,omitempty"`
}

func (x *GetStripePortalSessionRequest) Reset() {
	*x = GetStripePortalSessionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStripePortalSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStripePortalSessionRequest) ProtoMessage() {}

func (x *GetStripePortalSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStripePortalSessionRequest.ProtoReflect.Descriptor instead.
func (*GetStripePortalSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{16}
}

func (x *GetStripePortalSessionRequest) GetUiUrl() string {
	if x != nil {
		return x.UiUrl
	}
	return ""
}

type GetStripePortalSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetStripePortalSessionResponse) Reset() {
	*x = GetStripePortalSessionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStripePortalSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStripePortalSessionResponse) ProtoMessage() {}

func (x *GetStripePortalSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStripePortalSessionResponse.ProtoReflect.Descriptor instead.
func (*GetStripePortalSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{17}
}

func (x *GetStripePortalSessionResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UpdateWorkspaceUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email          string                                    `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	UserUpdateType UpdateWorkspaceUserRequest_UserUpdateType `protobuf:"varint,2,opt,name=user_update_type,json=userUpdateType,proto3,enum=UpdateWorkspaceUserRequest_UserUpdateType" json:"user_update_type,omitempty"`
	Role           UserRole                                  `protobuf:"varint,3,opt,name=role,proto3,enum=UserRole" json:"role,omitempty"`
}

func (x *UpdateWorkspaceUserRequest) Reset() {
	*x = UpdateWorkspaceUserRequest{}
	mi := &file_proto_dekart_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkspaceUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspaceUserRequest) ProtoMessage() {}

func (x *UpdateWorkspaceUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspaceUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkspaceUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateWorkspaceUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateWorkspaceUserRequest) GetUserUpdateType() UpdateWorkspaceUserRequest_UserUpdateType {
	if x != nil {
		return x.UserUpdateType
	}
	return UpdateWorkspaceUserRequest_USER_UPDATE_TYPE_UNSPECIFIED
}

func (x *UpdateWorkspaceUserRequest) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_ROLE_UNSPECIFIED
}

type UpdateWorkspaceUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWorkspaceUserResponse) Reset() {
	*x = UpdateWorkspaceUserResponse{}
	mi := &file_proto_dekart_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkspaceUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspaceUserResponse) ProtoMessage() {}

func (x *UpdateWorkspaceUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspaceUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkspaceUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{19}
}

type GetWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWorkspaceRequest) Reset() {
	*x = GetWorkspaceRequest{}
	mi := &file_proto_dekart_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceRequest) ProtoMessage() {}

func (x *GetWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{20}
}

type GetWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace       *Workspace         `protobuf:"bytes,1,opt,name=Workspace,proto3" json:"Workspace,omitempty"`
	Subscription    *Subscription      `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	Users           []*User            `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Invites         []*WorkspaceInvite `protobuf:"bytes,4,rep,name=invites,proto3" json:"invites,omitempty"`
	AddedUsersCount int64              `protobuf:"varint,5,opt,name=added_users_count,json=addedUsersCount,proto3" json:"added_users_count,omitempty"` // to not duplicate count logic in UI
}

func (x *GetWorkspaceResponse) Reset() {
	*x = GetWorkspaceResponse{}
	mi := &file_proto_dekart_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceResponse) ProtoMessage() {}

func (x *GetWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{21}
}

func (x *GetWorkspaceResponse) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *GetWorkspaceResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *GetWorkspaceResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetWorkspaceResponse) GetInvites() []*WorkspaceInvite {
	if x != nil {
		return x.Invites
	}
	return nil
}

func (x *GetWorkspaceResponse) GetAddedUsersCount() int64 {
	if x != nil {
		return x.AddedUsersCount
	}
	return 0
}

type CreateWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceName string `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *CreateWorkspaceRequest) Reset() {
	*x = CreateWorkspaceRequest{}
	mi := &file_proto_dekart_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspaceRequest) ProtoMessage() {}

func (x *CreateWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{22}
}

func (x *CreateWorkspaceRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type CreateWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateWorkspaceResponse) Reset() {
	*x = CreateWorkspaceResponse{}
	mi := &file_proto_dekart_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspaceResponse) ProtoMessage() {}

func (x *CreateWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{23}
}

type UpdateWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceName string `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *UpdateWorkspaceRequest) Reset() {
	*x = UpdateWorkspaceRequest{}
	mi := &file_proto_dekart_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspaceRequest) ProtoMessage() {}

func (x *UpdateWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateWorkspaceRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type UpdateWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWorkspaceResponse) Reset() {
	*x = UpdateWorkspaceResponse{}
	mi := &file_proto_dekart_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspaceResponse) ProtoMessage() {}

func (x *UpdateWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{25}
}

type RespondToInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId string `protobuf:"bytes,1,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	Accept   bool   `protobuf:"varint,2,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (x *RespondToInviteRequest) Reset() {
	*x = RespondToInviteRequest{}
	mi := &file_proto_dekart_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RespondToInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondToInviteRequest) ProtoMessage() {}

func (x *RespondToInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondToInviteRequest.ProtoReflect.Descriptor instead.
func (*RespondToInviteRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{26}
}

func (x *RespondToInviteRequest) GetInviteId() string {
	if x != nil {
		return x.InviteId
	}
	return ""
}

func (x *RespondToInviteRequest) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

type RespondToInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondToInviteResponse) Reset() {
	*x = RespondToInviteResponse{}
	mi := &file_proto_dekart_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RespondToInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondToInviteResponse) ProtoMessage() {}

func (x *RespondToInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondToInviteResponse.ProtoReflect.Descriptor instead.
func (*RespondToInviteResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{27}
}

type GetInvitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInvitesRequest) Reset() {
	*x = GetInvitesRequest{}
	mi := &file_proto_dekart_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitesRequest) ProtoMessage() {}

func (x *GetInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitesRequest.ProtoReflect.Descriptor instead.
func (*GetInvitesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{28}
}

type WorkspaceInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceId   string `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InviteId      string `protobuf:"bytes,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	InviterEmail  string `protobuf:"bytes,3,opt,name=inviter_email,json=inviterEmail,proto3" json:"inviter_email,omitempty"`
	WorkspaceName string `protobuf:"bytes,4,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	CreatedAt     int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *WorkspaceInvite) Reset() {
	*x = WorkspaceInvite{}
	mi := &file_proto_dekart_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInvite) ProtoMessage() {}

func (x *WorkspaceInvite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInvite.ProtoReflect.Descriptor instead.
func (*WorkspaceInvite) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{29}
}

func (x *WorkspaceInvite) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *WorkspaceInvite) GetInviteId() string {
	if x != nil {
		return x.InviteId
	}
	return ""
}

func (x *WorkspaceInvite) GetInviterEmail() string {
	if x != nil {
		return x.InviterEmail
	}
	return ""
}

func (x *WorkspaceInvite) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *WorkspaceInvite) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetInvitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invites []*WorkspaceInvite `protobuf:"bytes,1,rep,name=invites,proto3" json:"invites,omitempty"`
}

func (x *GetInvitesResponse) Reset() {
	*x = GetInvitesResponse{}
	mi := &file_proto_dekart_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitesResponse) ProtoMessage() {}

func (x *GetInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitesResponse.ProtoReflect.Descriptor instead.
func (*GetInvitesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{30}
}

func (x *GetInvitesResponse) GetInvites() []*WorkspaceInvite {
	if x != nil {
		return x.Invites
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string     `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	UpdatedAt int64      `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status    UserStatus `protobuf:"varint,3,opt,name=status,proto3,enum=UserStatus" json:"status,omitempty"`
	InviteId  string     `protobuf:"bytes,4,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	Role      UserRole   `protobuf:"varint,5,opt,name=role,proto3,enum=UserRole" json:"role,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_proto_dekart_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{31}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *User) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *User) GetInviteId() string {
	if x != nil {
		return x.InviteId
	}
	return ""
}

func (x *User) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_ROLE_UNSPECIFIED
}

type GetGcpProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGcpProjectListRequest) Reset() {
	*x = GetGcpProjectListRequest{}
	mi := &file_proto_dekart_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGcpProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGcpProjectListRequest) ProtoMessage() {}

func (x *GetGcpProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGcpProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetGcpProjectListRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{32}
}

type GetGcpProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *GetGcpProjectListResponse) Reset() {
	*x = GetGcpProjectListResponse{}
	mi := &file_proto_dekart_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGcpProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGcpProjectListResponse) ProtoMessage() {}

func (x *GetGcpProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGcpProjectListResponse.ProtoReflect.Descriptor instead.
func (*GetGcpProjectListResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{33}
}

func (x *GetGcpProjectListResponse) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type SetDefaultConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *SetDefaultConnectionRequest) Reset() {
	*x = SetDefaultConnectionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultConnectionRequest) ProtoMessage() {}

func (x *SetDefaultConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultConnectionRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultConnectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{34}
}

func (x *SetDefaultConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type SetDefaultConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDefaultConnectionResponse) Reset() {
	*x = SetDefaultConnectionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultConnectionResponse) ProtoMessage() {}

func (x *SetDefaultConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultConnectionResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{35}
}

type RunAllQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId          string        `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	QueryParams       []*QueryParam `protobuf:"bytes,2,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	QueryParamsValues string        `protobuf:"bytes,3,opt,name=query_params_values,json=queryParamsValues,proto3" json:"query_params_values,omitempty"` // url encoded
}

func (x *RunAllQueriesRequest) Reset() {
	*x = RunAllQueriesRequest{}
	mi := &file_proto_dekart_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAllQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAllQueriesRequest) ProtoMessage() {}

func (x *RunAllQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAllQueriesRequest.ProtoReflect.Descriptor instead.
func (*RunAllQueriesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{36}
}

func (x *RunAllQueriesRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *RunAllQueriesRequest) GetQueryParams() []*QueryParam {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *RunAllQueriesRequest) GetQueryParamsValues() string {
	if x != nil {
		return x.QueryParamsValues
	}
	return ""
}

type RunAllQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunAllQueriesResponse) Reset() {
	*x = RunAllQueriesResponse{}
	mi := &file_proto_dekart_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAllQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAllQueriesResponse) ProtoMessage() {}

func (x *RunAllQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAllQueriesResponse.ProtoReflect.Descriptor instead.
func (*RunAllQueriesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{37}
}

type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	mi := &file_proto_dekart_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{38}
}

func (x *Workspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanType             PlanType `protobuf:"varint,2,opt,name=plan_type,json=planType,proto3,enum=PlanType" json:"plan_type,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` //seconds
	CustomerId           string   `protobuf:"bytes,6,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	StripeSubscriptionId string   `protobuf:"bytes,7,opt,name=stripe_subscription_id,json=stripeSubscriptionId,proto3" json:"stripe_subscription_id,omitempty"`
	StripeCustomerEmail  string   `protobuf:"bytes,8,opt,name=stripe_customer_email,json=stripeCustomerEmail,proto3" json:"stripe_customer_email,omitempty"`
	CancelAt             int64    `protobuf:"varint,9,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"` //seconds
	ItemId               string   `protobuf:"bytes,10,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`       // stripe subscription item id
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_proto_dekart_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{39}
}

func (x *Subscription) GetPlanType() PlanType {
	if x != nil {
		return x.PlanType
	}
	return PlanType_TYPE_UNSPECIFIED
}

func (x *Subscription) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Subscription) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Subscription) GetStripeSubscriptionId() string {
	if x != nil {
		return x.StripeSubscriptionId
	}
	return ""
}

func (x *Subscription) GetStripeCustomerEmail() string {
	if x != nil {
		return x.StripeCustomerEmail
	}
	return ""
}

func (x *Subscription) GetCancelAt() int64 {
	if x != nil {
		return x.CancelAt
	}
	return 0
}

func (x *Subscription) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type CreateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanType PlanType `protobuf:"varint,1,opt,name=plan_type,json=planType,proto3,enum=PlanType" json:"plan_type,omitempty"`
	UiUrl    string   `protobuf:"bytes,2,opt,name=ui_url,json=uiUrl,proto3" json:"ui_url,omitempty"`
}

func (x *CreateSubscriptionRequest) Reset() {
	*x = CreateSubscriptionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionRequest) ProtoMessage() {}

func (x *CreateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{40}
}

func (x *CreateSubscriptionRequest) GetPlanType() PlanType {
	if x != nil {
		return x.PlanType
	}
	return PlanType_TYPE_UNSPECIFIED
}

func (x *CreateSubscriptionRequest) GetUiUrl() string {
	if x != nil {
		return x.UiUrl
	}
	return ""
}

type CreateSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectUrl string `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (x *CreateSubscriptionResponse) Reset() {
	*x = CreateSubscriptionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionResponse) ProtoMessage() {}

func (x *CreateSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{41}
}

func (x *CreateSubscriptionResponse) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type GetConnectionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConnectionListRequest) Reset() {
	*x = GetConnectionListRequest{}
	mi := &file_proto_dekart_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionListRequest) ProtoMessage() {}

func (x *GetConnectionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionListRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionListRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{42}
}

type GetConnectionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *GetConnectionListResponse) Reset() {
	*x = GetConnectionListResponse{}
	mi := &file_proto_dekart_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionListResponse) ProtoMessage() {}

func (x *GetConnectionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionListResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionListResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{43}
}

func (x *GetConnectionListResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type GetUserStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamOptions *StreamOptions `protobuf:"bytes,1,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
}

func (x *GetUserStreamRequest) Reset() {
	*x = GetUserStreamRequest{}
	mi := &file_proto_dekart_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStreamRequest) ProtoMessage() {}

func (x *GetUserStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStreamRequest.ProtoReflect.Descriptor instead.
func (*GetUserStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{44}
}

func (x *GetUserStreamRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

type GetUserStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamOptions      *StreamOptions `protobuf:"bytes,1,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
	ConnectionUpdate   int64          `protobuf:"varint,2,opt,name=connection_update,json=connectionUpdate,proto3" json:"connection_update,omitempty"`
	Email              string         `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"` // user email used to show user icon in UI
	WorkspaceId        string         `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	PlanType           PlanType       `protobuf:"varint,5,opt,name=plan_type,json=planType,proto3,enum=PlanType" json:"plan_type,omitempty"`
	WorkspaceUpdate    int64          `protobuf:"varint,6,opt,name=workspace_update,json=workspaceUpdate,proto3" json:"workspace_update,omitempty"` // includes invites, members and subscription
	Role               UserRole       `protobuf:"varint,7,opt,name=role,proto3,enum=UserRole" json:"role,omitempty"`
	IsPlayground       bool           `protobuf:"varint,8,opt,name=is_playground,json=isPlayground,proto3" json:"is_playground,omitempty"`
	IsDefaultWorkspace bool           `protobuf:"varint,9,opt,name=is_default_workspace,json=isDefaultWorkspace,proto3" json:"is_default_workspace,omitempty"`
}

func (x *GetUserStreamResponse) Reset() {
	*x = GetUserStreamResponse{}
	mi := &file_proto_dekart_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStreamResponse) ProtoMessage() {}

func (x *GetUserStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStreamResponse.ProtoReflect.Descriptor instead.
func (*GetUserStreamResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{45}
}

func (x *GetUserStreamResponse) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *GetUserStreamResponse) GetConnectionUpdate() int64 {
	if x != nil {
		return x.ConnectionUpdate
	}
	return 0
}

func (x *GetUserStreamResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserStreamResponse) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *GetUserStreamResponse) GetPlanType() PlanType {
	if x != nil {
		return x.PlanType
	}
	return PlanType_TYPE_UNSPECIFIED
}

func (x *GetUserStreamResponse) GetWorkspaceUpdate() int64 {
	if x != nil {
		return x.WorkspaceUpdate
	}
	return 0
}

func (x *GetUserStreamResponse) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_ROLE_UNSPECIFIED
}

func (x *GetUserStreamResponse) GetIsPlayground() bool {
	if x != nil {
		return x.IsPlayground
	}
	return false
}

func (x *GetUserStreamResponse) GetIsDefaultWorkspace() bool {
	if x != nil {
		return x.IsDefaultWorkspace
	}
	return false
}

type TestConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *TestConnectionRequest) Reset() {
	*x = TestConnectionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConnectionRequest) ProtoMessage() {}

func (x *TestConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConnectionRequest.ProtoReflect.Descriptor instead.
func (*TestConnectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{46}
}

func (x *TestConnectionRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type TestConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TestConnectionResponse) Reset() {
	*x = TestConnectionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConnectionResponse) ProtoMessage() {}

func (x *TestConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConnectionResponse.ProtoReflect.Descriptor instead.
func (*TestConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{47}
}

func (x *TestConnectionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestConnectionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ArchiveConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ArchiveConnectionRequest) Reset() {
	*x = ArchiveConnectionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveConnectionRequest) ProtoMessage() {}

func (x *ArchiveConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveConnectionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveConnectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{48}
}

func (x *ArchiveConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type ArchiveConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveConnectionResponse) Reset() {
	*x = ArchiveConnectionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveConnectionResponse) ProtoMessage() {}

func (x *ArchiveConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveConnectionResponse.ProtoReflect.Descriptor instead.
func (*ArchiveConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{49}
}

type UpdateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionRequest) Reset() {
	*x = UpdateConnectionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionRequest) ProtoMessage() {}

func (x *UpdateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateConnectionRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionResponse) Reset() {
	*x = UpdateConnectionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionResponse) ProtoMessage() {}

func (x *UpdateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{52}
}

func (x *CreateConnectionRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{53}
}

func (x *CreateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConnectionName     string         `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connection_name,omitempty"`
	BigqueryProjectId  string         `protobuf:"bytes,3,opt,name=bigquery_project_id,json=bigqueryProjectId,proto3" json:"bigquery_project_id,omitempty"`
	CloudStorageBucket string         `protobuf:"bytes,4,opt,name=cloud_storage_bucket,json=cloudStorageBucket,proto3" json:"cloud_storage_bucket,omitempty"`
	IsDefault          bool           `protobuf:"varint,5,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	AuthorEmail        string         `protobuf:"bytes,6,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	CreatedAt          int64          `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int64          `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DatasetCount       int64          `protobuf:"varint,9,opt,name=dataset_count,json=datasetCount,proto3" json:"dataset_count,omitempty"`
	CanStoreFiles      bool           `protobuf:"varint,10,opt,name=can_store_files,json=canStoreFiles,proto3" json:"can_store_files,omitempty"`
	ConnectionType     ConnectionType `protobuf:"varint,11,opt,name=connection_type,json=connectionType,proto3,enum=ConnectionType" json:"connection_type,omitempty"`
	SnowflakeAccountId string         `protobuf:"bytes,12,opt,name=snowflake_account_id,json=snowflakeAccountId,proto3" json:"snowflake_account_id,omitempty"`
	SnowflakeUsername  string         `protobuf:"bytes,13,opt,name=snowflake_username,json=snowflakeUsername,proto3" json:"snowflake_username,omitempty"`
	SnowflakePassword  *Secret        `protobuf:"bytes,14,opt,name=snowflake_password,json=snowflakePassword,proto3" json:"snowflake_password,omitempty"`
	SnowflakeWarehouse string         `protobuf:"bytes,15,opt,name=snowflake_warehouse,json=snowflakeWarehouse,proto3" json:"snowflake_warehouse,omitempty"`
	BigqueryKey        *Secret        `protobuf:"bytes,16,opt,name=bigquery_key,json=bigqueryKey,proto3" json:"bigquery_key,omitempty"`
	SnowflakeKey       *Secret        `protobuf:"bytes,17,opt,name=snowflake_key,json=snowflakeKey,proto3" json:"snowflake_key,omitempty"`
	WherobotsHost      string         `protobuf:"bytes,18,opt,name=wherobots_host,json=wherobotsHost,proto3" json:"wherobots_host,omitempty"`
	WherobotsKey       *Secret        `protobuf:"bytes,19,opt,name=wherobots_key,json=wherobotsKey,proto3" json:"wherobots_key,omitempty"`
	WherobotsRuntime   string         `protobuf:"bytes,20,opt,name=wherobots_runtime,json=wherobotsRuntime,proto3" json:"wherobots_runtime,omitempty"`
	WherobotsRegion    string         `protobuf:"bytes,21,opt,name=wherobots_region,json=wherobotsRegion,proto3" json:"wherobots_region,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_proto_dekart_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{54}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

func (x *Connection) GetBigqueryProjectId() string {
	if x != nil {
		return x.BigqueryProjectId
	}
	return ""
}

func (x *Connection) GetCloudStorageBucket() string {
	if x != nil {
		return x.CloudStorageBucket
	}
	return ""
}

func (x *Connection) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Connection) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *Connection) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Connection) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Connection) GetDatasetCount() int64 {
	if x != nil {
		return x.DatasetCount
	}
	return 0
}

func (x *Connection) GetCanStoreFiles() bool {
	if x != nil {
		return x.CanStoreFiles
	}
	return false
}

func (x *Connection) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

func (x *Connection) GetSnowflakeAccountId() string {
	if x != nil {
		return x.SnowflakeAccountId
	}
	return ""
}

func (x *Connection) GetSnowflakeUsername() string {
	if x != nil {
		return x.SnowflakeUsername
	}
	return ""
}

func (x *Connection) GetSnowflakePassword() *Secret {
	if x != nil {
		return x.SnowflakePassword
	}
	return nil
}

func (x *Connection) GetSnowflakeWarehouse() string {
	if x != nil {
		return x.SnowflakeWarehouse
	}
	return ""
}

func (x *Connection) GetBigqueryKey() *Secret {
	if x != nil {
		return x.BigqueryKey
	}
	return nil
}

func (x *Connection) GetSnowflakeKey() *Secret {
	if x != nil {
		return x.SnowflakeKey
	}
	return nil
}

func (x *Connection) GetWherobotsHost() string {
	if x != nil {
		return x.WherobotsHost
	}
	return ""
}

func (x *Connection) GetWherobotsKey() *Secret {
	if x != nil {
		return x.WherobotsKey
	}
	return nil
}

func (x *Connection) GetWherobotsRuntime() string {
	if x != nil {
		return x.WherobotsRuntime
	}
	return ""
}

func (x *Connection) GetWherobotsRegion() string {
	if x != nil {
		return x.WherobotsRegion
	}
	return ""
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientEncrypted string `protobuf:"bytes,1,opt,name=client_encrypted,json=clientEncrypted,proto3" json:"client_encrypted,omitempty"` // encrypted with client key
	ServerEncrypted string `protobuf:"bytes,2,opt,name=server_encrypted,json=serverEncrypted,proto3" json:"server_encrypted,omitempty"` // encrypted with server key
	Length          int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`                                         // length of the password for placeholder
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_proto_dekart_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{55}
}

func (x *Secret) GetClientEncrypted() string {
	if x != nil {
		return x.ClientEncrypted
	}
	return ""
}

func (x *Secret) GetServerEncrypted() string {
	if x != nil {
		return x.ServerEncrypted
	}
	return ""
}

func (x *Secret) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type GetUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUsageRequest) Reset() {
	*x = GetUsageRequest{}
	mi := &file_proto_dekart_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsageRequest) ProtoMessage() {}

func (x *GetUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsageRequest.ProtoReflect.Descriptor instead.
func (*GetUsageRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{56}
}

type GetUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalReports int64 `protobuf:"varint,1,opt,name=total_reports,json=totalReports,proto3" json:"total_reports,omitempty"`
	TotalQueries int64 `protobuf:"varint,2,opt,name=total_queries,json=totalQueries,proto3" json:"total_queries,omitempty"`
	TotalFiles   int64 `protobuf:"varint,3,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	TotalAuthors int64 `protobuf:"varint,4,opt,name=total_authors,json=totalAuthors,proto3" json:"total_authors,omitempty"`
}

func (x *GetUsageResponse) Reset() {
	*x = GetUsageResponse{}
	mi := &file_proto_dekart_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsageResponse) ProtoMessage() {}

func (x *GetUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsageResponse.ProtoReflect.Descriptor instead.
func (*GetUsageResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{57}
}

func (x *GetUsageResponse) GetTotalReports() int64 {
	if x != nil {
		return x.TotalReports
	}
	return 0
}

func (x *GetUsageResponse) GetTotalQueries() int64 {
	if x != nil {
		return x.TotalQueries
	}
	return 0
}

func (x *GetUsageResponse) GetTotalFiles() int64 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *GetUsageResponse) GetTotalAuthors() int64 {
	if x != nil {
		return x.TotalAuthors
	}
	return 0
}

type SetDiscoverableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId     string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Discoverable bool   `protobuf:"varint,2,opt,name=discoverable,proto3" json:"discoverable,omitempty"`            // report is discoverable by other users of the same instance
	AllowEdit    bool   `protobuf:"varint,3,opt,name=allow_edit,json=allowEdit,proto3" json:"allow_edit,omitempty"` // allow other users to edit the report
}

func (x *SetDiscoverableRequest) Reset() {
	*x = SetDiscoverableRequest{}
	mi := &file_proto_dekart_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDiscoverableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiscoverableRequest) ProtoMessage() {}

func (x *SetDiscoverableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiscoverableRequest.ProtoReflect.Descriptor instead.
func (*SetDiscoverableRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{58}
}

func (x *SetDiscoverableRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *SetDiscoverableRequest) GetDiscoverable() bool {
	if x != nil {
		return x.Discoverable
	}
	return false
}

func (x *SetDiscoverableRequest) GetAllowEdit() bool {
	if x != nil {
		return x.AllowEdit
	}
	return false
}

type SetDiscoverableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDiscoverableResponse) Reset() {
	*x = SetDiscoverableResponse{}
	mi := &file_proto_dekart_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDiscoverableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiscoverableResponse) ProtoMessage() {}

func (x *SetDiscoverableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiscoverableResponse.ProtoReflect.Descriptor instead.
func (*SetDiscoverableResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{59}
}

type RemoveDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *RemoveDatasetRequest) Reset() {
	*x = RemoveDatasetRequest{}
	mi := &file_proto_dekart_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDatasetRequest) ProtoMessage() {}

func (x *RemoveDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDatasetRequest.ProtoReflect.Descriptor instead.
func (*RemoveDatasetRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{60}
}

func (x *RemoveDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type RemoveDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *RemoveDatasetResponse) Reset() {
	*x = RemoveDatasetResponse{}
	mi := &file_proto_dekart_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDatasetResponse) ProtoMessage() {}

func (x *RemoveDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDatasetResponse.ProtoReflect.Descriptor instead.
func (*RemoveDatasetResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{61}
}

func (x *RemoveDatasetResponse) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	mi := &file_proto_dekart_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOptions.ProtoReflect.Descriptor instead.
func (*StreamOptions) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{62}
}

func (x *StreamOptions) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type GetEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEnvRequest) Reset() {
	*x = GetEnvRequest{}
	mi := &file_proto_dekart_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvRequest) ProtoMessage() {}

func (x *GetEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvRequest.ProtoReflect.Descriptor instead.
func (*GetEnvRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{63}
}

type GetEnvResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables []*GetEnvResponse_Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *GetEnvResponse) Reset() {
	*x = GetEnvResponse{}
	mi := &file_proto_dekart_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvResponse) ProtoMessage() {}

func (x *GetEnvResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvResponse.ProtoReflect.Descriptor instead.
func (*GetEnvResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{64}
}

func (x *GetEnvResponse) GetVariables() []*GetEnvResponse_Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

// RedirectState is used to pass state between the server and the UI via redirect
type RedirectState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenJson              string `protobuf:"bytes,1,opt,name=token_json,json=tokenJson,proto3" json:"token_json,omitempty"`
	Error                  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SensitiveScopesGranted bool   `protobuf:"varint,3,opt,name=sensitive_scopes_granted,json=sensitiveScopesGranted,proto3" json:"sensitive_scopes_granted,omitempty"` // if true, sensitive scope are granted
}

func (x *RedirectState) Reset() {
	*x = RedirectState{}
	mi := &file_proto_dekart_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedirectState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectState) ProtoMessage() {}

func (x *RedirectState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectState.ProtoReflect.Descriptor instead.
func (*RedirectState) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{65}
}

func (x *RedirectState) GetTokenJson() string {
	if x != nil {
		return x.TokenJson
	}
	return ""
}

func (x *RedirectState) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RedirectState) GetSensitiveScopesGranted() bool {
	if x != nil {
		return x.SensitiveScopesGranted
	}
	return false
}

// AuthState is used to pass state between UI, auth endpoint and Google OAuth via redirect
type AuthState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action              AuthState_Action `protobuf:"varint,1,opt,name=action,proto3,enum=AuthState_Action" json:"action,omitempty"`
	AuthUrl             string           `protobuf:"bytes,2,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`                                         // dekart backend url to handle auth request
	UiUrl               string           `protobuf:"bytes,3,opt,name=ui_url,json=uiUrl,proto3" json:"ui_url,omitempty"`                                               // dekart frontend url to redirect to after auth
	AccessTokenToRevoke string           `protobuf:"bytes,4,opt,name=access_token_to_revoke,json=accessTokenToRevoke,proto3" json:"access_token_to_revoke,omitempty"` // access token to revoke
	SwitchAccount       bool             `protobuf:"varint,5,opt,name=switch_account,json=switchAccount,proto3" json:"switch_account,omitempty"`                      // if true, user will be requested to switch account
	SensitiveScope      bool             `protobuf:"varint,6,opt,name=sensitive_scope,json=sensitiveScope,proto3" json:"sensitive_scope,omitempty"`                   // if true, user will be requested to grant sensitive scope
	LoginHint           string           `protobuf:"bytes,7,opt,name=login_hint,json=loginHint,proto3" json:"login_hint,omitempty"`                                   // login hint for Google OAuth
}

func (x *AuthState) Reset() {
	*x = AuthState{}
	mi := &file_proto_dekart_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthState) ProtoMessage() {}

func (x *AuthState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthState.ProtoReflect.Descriptor instead.
func (*AuthState) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{66}
}

func (x *AuthState) GetAction() AuthState_Action {
	if x != nil {
		return x.Action
	}
	return AuthState_ACTION_UNSPECIFIED
}

func (x *AuthState) GetAuthUrl() string {
	if x != nil {
		return x.AuthUrl
	}
	return ""
}

func (x *AuthState) GetUiUrl() string {
	if x != nil {
		return x.UiUrl
	}
	return ""
}

func (x *AuthState) GetAccessTokenToRevoke() string {
	if x != nil {
		return x.AccessTokenToRevoke
	}
	return ""
}

func (x *AuthState) GetSwitchAccount() bool {
	if x != nil {
		return x.SwitchAccount
	}
	return false
}

func (x *AuthState) GetSensitiveScope() bool {
	if x != nil {
		return x.SensitiveScope
	}
	return false
}

func (x *AuthState) GetLoginHint() string {
	if x != nil {
		return x.LoginHint
	}
	return ""
}

type ArchiveReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Archive  bool   `protobuf:"varint,2,opt,name=archive,proto3" json:"archive,omitempty"`
}

func (x *ArchiveReportRequest) Reset() {
	*x = ArchiveReportRequest{}
	mi := &file_proto_dekart_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveReportRequest) ProtoMessage() {}

func (x *ArchiveReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveReportRequest.ProtoReflect.Descriptor instead.
func (*ArchiveReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{67}
}

func (x *ArchiveReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ArchiveReportRequest) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

type ArchiveReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveReportResponse) Reset() {
	*x = ArchiveReportResponse{}
	mi := &file_proto_dekart_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveReportResponse) ProtoMessage() {}

func (x *ArchiveReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveReportResponse.ProtoReflect.Descriptor instead.
func (*ArchiveReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{68}
}

type ReportListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamOptions *StreamOptions `protobuf:"bytes,1,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
}

func (x *ReportListRequest) Reset() {
	*x = ReportListRequest{}
	mi := &file_proto_dekart_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportListRequest) ProtoMessage() {}

func (x *ReportListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportListRequest.ProtoReflect.Descriptor instead.
func (*ReportListRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{69}
}

func (x *ReportListRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

type ReportListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports       []*Report      `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	StreamOptions *StreamOptions `protobuf:"bytes,2,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
}

func (x *ReportListResponse) Reset() {
	*x = ReportListResponse{}
	mi := &file_proto_dekart_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportListResponse) ProtoMessage() {}

func (x *ReportListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportListResponse.ProtoReflect.Descriptor instead.
func (*ReportListResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{70}
}

func (x *ReportListResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ReportListResponse) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

type Readme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markdown string `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
}

func (x *Readme) Reset() {
	*x = Readme{}
	mi := &file_proto_dekart_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Readme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Readme) ProtoMessage() {}

func (x *Readme) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Readme.ProtoReflect.Descriptor instead.
func (*Readme) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{71}
}

func (x *Readme) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type ReportAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewersTotal int64 `protobuf:"varint,1,opt,name=viewers_total,json=viewersTotal,proto3" json:"viewers_total,omitempty"`
	Viewers_7D   int64 `protobuf:"varint,2,opt,name=viewers_7d,json=viewers7d,proto3" json:"viewers_7d,omitempty"`
	Viewers_24H  int64 `protobuf:"varint,3,opt,name=viewers_24h,json=viewers24h,proto3" json:"viewers_24h,omitempty"`
}

func (x *ReportAnalytics) Reset() {
	*x = ReportAnalytics{}
	mi := &file_proto_dekart_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAnalytics) ProtoMessage() {}

func (x *ReportAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAnalytics.ProtoReflect.Descriptor instead.
func (*ReportAnalytics) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{72}
}

func (x *ReportAnalytics) GetViewersTotal() int64 {
	if x != nil {
		return x.ViewersTotal
	}
	return 0
}

func (x *ReportAnalytics) GetViewers_7D() int64 {
	if x != nil {
		return x.Viewers_7D
	}
	return 0
}

func (x *ReportAnalytics) GetViewers_24H() int64 {
	if x != nil {
		return x.Viewers_24H
	}
	return 0
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MapConfig          string        `protobuf:"bytes,2,opt,name=map_config,json=mapConfig,proto3" json:"map_config,omitempty"`
	Title              string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Archived           bool          `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	CanWrite           bool          `protobuf:"varint,5,opt,name=can_write,json=canWrite,proto3" json:"can_write,omitempty"` // user can write to the report because he is the author or has edit permission
	AuthorEmail        string        `protobuf:"bytes,6,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	Discoverable       bool          `protobuf:"varint,7,opt,name=discoverable,proto3" json:"discoverable,omitempty"`            // report is discoverable by other users of the same instance
	AllowEdit          bool          `protobuf:"varint,8,opt,name=allow_edit,json=allowEdit,proto3" json:"allow_edit,omitempty"` // allow other users to edit the report
	IsAuthor           bool          `protobuf:"varint,9,opt,name=is_author,json=isAuthor,proto3" json:"is_author,omitempty"`    // user is the author of the report
	CreatedAt          int64         `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int64         `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsSharable         bool          `protobuf:"varint,12,opt,name=is_sharable,json=isSharable,proto3" json:"is_sharable,omitempty"`                           // can be shared with other users (depends where result is stored)
	NeedSensitiveScope bool          `protobuf:"varint,13,opt,name=need_sensitive_scope,json=needSensitiveScope,proto3" json:"need_sensitive_scope,omitempty"` // need sensitive scope to run queries and read results
	IsPlayground       bool          `protobuf:"varint,14,opt,name=is_playground,json=isPlayground,proto3" json:"is_playground,omitempty"`                     // true - playground, false - workspace
	IsPublic           bool          `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`                                 // true - public, false - private
	AllowExport        bool          `protobuf:"varint,16,opt,name=allow_export,json=allowExport,proto3" json:"allow_export,omitempty"`                        // allow export datasets
	QueryParams        []*QueryParam `protobuf:"bytes,17,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	Readme             *Readme       `protobuf:"bytes,18,opt,name=readme,proto3" json:"readme,omitempty"`
	HasDirectAccess    bool          `protobuf:"varint,19,opt,name=has_direct_access,json=hasDirectAccess,proto3" json:"has_direct_access,omitempty"` // true - report has direct access for other users, false - no direct access
}

func (x *Report) Reset() {
	*x = Report{}
	mi := &file_proto_dekart_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{73}
}

func (x *Report) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Report) GetMapConfig() string {
	if x != nil {
		return x.MapConfig
	}
	return ""
}

func (x *Report) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Report) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Report) GetCanWrite() bool {
	if x != nil {
		return x.CanWrite
	}
	return false
}

func (x *Report) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *Report) GetDiscoverable() bool {
	if x != nil {
		return x.Discoverable
	}
	return false
}

func (x *Report) GetAllowEdit() bool {
	if x != nil {
		return x.AllowEdit
	}
	return false
}

func (x *Report) GetIsAuthor() bool {
	if x != nil {
		return x.IsAuthor
	}
	return false
}

func (x *Report) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Report) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Report) GetIsSharable() bool {
	if x != nil {
		return x.IsSharable
	}
	return false
}

func (x *Report) GetNeedSensitiveScope() bool {
	if x != nil {
		return x.NeedSensitiveScope
	}
	return false
}

func (x *Report) GetIsPlayground() bool {
	if x != nil {
		return x.IsPlayground
	}
	return false
}

func (x *Report) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Report) GetAllowExport() bool {
	if x != nil {
		return x.AllowExport
	}
	return false
}

func (x *Report) GetQueryParams() []*QueryParam {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *Report) GetReadme() *Readme {
	if x != nil {
		return x.Readme
	}
	return nil
}

func (x *Report) GetHasDirectAccess() bool {
	if x != nil {
		return x.HasDirectAccess
	}
	return false
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportId       string         `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	QueryId        string         `protobuf:"bytes,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	CreatedAt      int64          `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      int64          `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FileId         string         `protobuf:"bytes,6,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Name           string         `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	ConnectionId   string         `protobuf:"bytes,8,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ConnectionType ConnectionType `protobuf:"varint,9,opt,name=connection_type,json=connectionType,proto3,enum=ConnectionType" json:"connection_type,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_proto_dekart_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{74}
}

func (x *Dataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dataset) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *Dataset) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Dataset) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Dataset) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Dataset) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *Dataset) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

type QueryJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QueryId         string             `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryText       string             `protobuf:"bytes,3,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	JobResultId     string             `protobuf:"bytes,4,opt,name=job_result_id,json=jobResultId,proto3" json:"job_result_id,omitempty"`
	JobError        string             `protobuf:"bytes,5,opt,name=job_error,json=jobError,proto3" json:"job_error,omitempty"`
	JobDuration     int64              `protobuf:"varint,6,opt,name=job_duration,json=jobDuration,proto3" json:"job_duration,omitempty"`
	TotalRows       int32              `protobuf:"varint,7,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	BytesProcessed  int64              `protobuf:"varint,8,opt,name=bytes_processed,json=bytesProcessed,proto3" json:"bytes_processed,omitempty"`
	ResultSize      int64              `protobuf:"varint,9,opt,name=result_size,json=resultSize,proto3" json:"result_size,omitempty"`
	CreatedAt       int64              `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       int64              `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	JobStatus       QueryJob_JobStatus `protobuf:"varint,12,opt,name=job_status,json=jobStatus,proto3,enum=QueryJob_JobStatus" json:"job_status,omitempty"`
	DwJobId         string             `protobuf:"bytes,13,opt,name=dw_job_id,json=dwJobId,proto3" json:"dw_job_id,omitempty"`
	QueryParamsHash string             `protobuf:"bytes,14,opt,name=query_params_hash,json=queryParamsHash,proto3" json:"query_params_hash,omitempty"`
}

func (x *QueryJob) Reset() {
	*x = QueryJob{}
	mi := &file_proto_dekart_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJob) ProtoMessage() {}

func (x *QueryJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJob.ProtoReflect.Descriptor instead.
func (*QueryJob) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{75}
}

func (x *QueryJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryJob) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *QueryJob) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *QueryJob) GetJobResultId() string {
	if x != nil {
		return x.JobResultId
	}
	return ""
}

func (x *QueryJob) GetJobError() string {
	if x != nil {
		return x.JobError
	}
	return ""
}

func (x *QueryJob) GetJobDuration() int64 {
	if x != nil {
		return x.JobDuration
	}
	return 0
}

func (x *QueryJob) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *QueryJob) GetBytesProcessed() int64 {
	if x != nil {
		return x.BytesProcessed
	}
	return 0
}

func (x *QueryJob) GetResultSize() int64 {
	if x != nil {
		return x.ResultSize
	}
	return 0
}

func (x *QueryJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *QueryJob) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *QueryJob) GetJobStatus() QueryJob_JobStatus {
	if x != nil {
		return x.JobStatus
	}
	return QueryJob_JOB_STATUS_UNSPECIFIED
}

func (x *QueryJob) GetDwJobId() string {
	if x != nil {
		return x.DwJobId
	}
	return ""
}

func (x *QueryJob) GetQueryParamsHash() string {
	if x != nil {
		return x.QueryParamsHash
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QueryText     string            `protobuf:"bytes,2,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	CreatedAt     int64             `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64             `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	QuerySource   Query_QuerySource `protobuf:"varint,5,opt,name=query_source,json=querySource,proto3,enum=Query_QuerySource" json:"query_source,omitempty"`
	QuerySourceId string            `protobuf:"bytes,6,opt,name=query_source_id,json=querySourceId,proto3" json:"query_source_id,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_proto_dekart_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{76}
}

func (x *Query) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Query) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *Query) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Query) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Query) GetQuerySource() Query_QuerySource {
	if x != nil {
		return x.QuerySource
	}
	return Query_QUERY_SOURCE_UNSPECIFIED
}

func (x *Query) GetQuerySourceId() string {
	if x != nil {
		return x.QuerySourceId
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MimeType    string      `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size        int64       `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	SourceId    string      `protobuf:"bytes,5,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	CreatedAt   int64       `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   int64       `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FileStatus  File_Status `protobuf:"varint,8,opt,name=file_status,json=fileStatus,proto3,enum=File_Status" json:"file_status,omitempty"`
	UploadError string      `protobuf:"bytes,9,opt,name=upload_error,json=uploadError,proto3" json:"upload_error,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_proto_dekart_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{77}
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *File) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *File) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *File) GetFileStatus() File_Status {
	if x != nil {
		return x.FileStatus
	}
	return File_STATUS_UNSPECIFIED
}

func (x *File) GetUploadError() string {
	if x != nil {
		return x.UploadError
	}
	return ""
}

type UpdateReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId    string        `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	MapConfig   string        `protobuf:"bytes,2,opt,name=map_config,json=mapConfig,proto3" json:"map_config,omitempty"`
	Title       string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Query       []*Query      `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty"`
	QueryParams []*QueryParam `protobuf:"bytes,5,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	Readme      *Readme       `protobuf:"bytes,6,opt,name=readme,proto3" json:"readme,omitempty"`
}

func (x *UpdateReportRequest) Reset() {
	*x = UpdateReportRequest{}
	mi := &file_proto_dekart_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportRequest) ProtoMessage() {}

func (x *UpdateReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *UpdateReportRequest) GetMapConfig() string {
	if x != nil {
		return x.MapConfig
	}
	return ""
}

func (x *UpdateReportRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateReportRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UpdateReportRequest) GetQueryParams() []*QueryParam {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *UpdateReportRequest) GetReadme() *Readme {
	if x != nil {
		return x.Readme
	}
	return nil
}

type UpdateReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt int64 `protobuf:"varint,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateReportResponse) Reset() {
	*x = UpdateReportResponse{}
	mi := &file_proto_dekart_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportResponse) ProtoMessage() {}

func (x *UpdateReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportResponse.ProtoReflect.Descriptor instead.
func (*UpdateReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateReportResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RunQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId           string        `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryText         string        `protobuf:"bytes,2,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	QueryParams       []*QueryParam `protobuf:"bytes,3,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	QueryParamsValues string        `protobuf:"bytes,4,opt,name=query_params_values,json=queryParamsValues,proto3" json:"query_params_values,omitempty"` // url encoded
}

func (x *RunQueryRequest) Reset() {
	*x = RunQueryRequest{}
	mi := &file_proto_dekart_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQueryRequest) ProtoMessage() {}

func (x *RunQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQueryRequest.ProtoReflect.Descriptor instead.
func (*RunQueryRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{80}
}

func (x *RunQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *RunQueryRequest) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *RunQueryRequest) GetQueryParams() []*QueryParam {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *RunQueryRequest) GetQueryParamsValues() string {
	if x != nil {
		return x.QueryParamsValues
	}
	return ""
}

type RunQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunQueryResponse) Reset() {
	*x = RunQueryResponse{}
	mi := &file_proto_dekart_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQueryResponse) ProtoMessage() {}

func (x *RunQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQueryResponse.ProtoReflect.Descriptor instead.
func (*RunQueryResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{81}
}

type UpdateDatasetNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateDatasetNameRequest) Reset() {
	*x = UpdateDatasetNameRequest{}
	mi := &file_proto_dekart_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDatasetNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetNameRequest) ProtoMessage() {}

func (x *UpdateDatasetNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatasetNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateDatasetNameRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *UpdateDatasetNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateDatasetNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDatasetNameResponse) Reset() {
	*x = UpdateDatasetNameResponse{}
	mi := &file_proto_dekart_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDatasetNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetNameResponse) ProtoMessage() {}

func (x *UpdateDatasetNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateDatasetNameResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{83}
}

type UpdateDatasetConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId    string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *UpdateDatasetConnectionRequest) Reset() {
	*x = UpdateDatasetConnectionRequest{}
	mi := &file_proto_dekart_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDatasetConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetConnectionRequest) ProtoMessage() {}

func (x *UpdateDatasetConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatasetConnectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateDatasetConnectionRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *UpdateDatasetConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type UpdateDatasetConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDatasetConnectionResponse) Reset() {
	*x = UpdateDatasetConnectionResponse{}
	mi := &file_proto_dekart_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDatasetConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetConnectionResponse) ProtoMessage() {}

func (x *UpdateDatasetConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateDatasetConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{85}
}

type CreateDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *CreateDatasetRequest) Reset() {
	*x = CreateDatasetRequest{}
	mi := &file_proto_dekart_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetRequest) ProtoMessage() {}

func (x *CreateDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetRequest.ProtoReflect.Descriptor instead.
func (*CreateDatasetRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{86}
}

func (x *CreateDatasetRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type CreateDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDatasetResponse) Reset() {
	*x = CreateDatasetResponse{}
	mi := &file_proto_dekart_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetResponse) ProtoMessage() {}

func (x *CreateDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetResponse.ProtoReflect.Descriptor instead.
func (*CreateDatasetResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{87}
}

type CreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId    string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	mi := &file_proto_dekart_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{88}
}

func (x *CreateFileRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CreateFileRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type CreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	mi := &file_proto_dekart_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{89}
}

func (x *CreateFileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type CreateQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId    string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *CreateQueryRequest) Reset() {
	*x = CreateQueryRequest{}
	mi := &file_proto_dekart_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryRequest) ProtoMessage() {}

func (x *CreateQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{90}
}

func (x *CreateQueryRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CreateQueryRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type CreateQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *CreateQueryResponse) Reset() {
	*x = CreateQueryResponse{}
	mi := &file_proto_dekart_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse) ProtoMessage() {}

func (x *CreateQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{91}
}

func (x *CreateQueryResponse) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type ReportStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report        *Report        `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	StreamOptions *StreamOptions `protobuf:"bytes,2,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
}

func (x *ReportStreamRequest) Reset() {
	*x = ReportStreamRequest{}
	mi := &file_proto_dekart_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStreamRequest) ProtoMessage() {}

func (x *ReportStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStreamRequest.ProtoReflect.Descriptor instead.
func (*ReportStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{92}
}

func (x *ReportStreamRequest) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ReportStreamRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

type ReportStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report             *Report        `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Queries            []*Query       `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	StreamOptions      *StreamOptions `protobuf:"bytes,3,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
	Datasets           []*Dataset     `protobuf:"bytes,4,rep,name=datasets,proto3" json:"datasets,omitempty"`
	Files              []*File        `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	QueryJobs          []*QueryJob    `protobuf:"bytes,6,rep,name=query_jobs,json=queryJobs,proto3" json:"query_jobs,omitempty"`
	DirectAccessEmails []string       `protobuf:"bytes,7,rep,name=direct_access_emails,json=directAccessEmails,proto3" json:"direct_access_emails,omitempty"` // emails of users with direct access to the report
}

func (x *ReportStreamResponse) Reset() {
	*x = ReportStreamResponse{}
	mi := &file_proto_dekart_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStreamResponse) ProtoMessage() {}

func (x *ReportStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStreamResponse.ProtoReflect.Descriptor instead.
func (*ReportStreamResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{93}
}

func (x *ReportStreamResponse) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ReportStreamResponse) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ReportStreamResponse) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *ReportStreamResponse) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *ReportStreamResponse) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ReportStreamResponse) GetQueryJobs() []*QueryJob {
	if x != nil {
		return x.QueryJobs
	}
	return nil
}

func (x *ReportStreamResponse) GetDirectAccessEmails() []string {
	if x != nil {
		return x.DirectAccessEmails
	}
	return nil
}

type ForkReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *ForkReportRequest) Reset() {
	*x = ForkReportRequest{}
	mi := &file_proto_dekart_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForkReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkReportRequest) ProtoMessage() {}

func (x *ForkReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkReportRequest.ProtoReflect.Descriptor instead.
func (*ForkReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{94}
}

func (x *ForkReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type ForkReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *ForkReportResponse) Reset() {
	*x = ForkReportResponse{}
	mi := &file_proto_dekart_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForkReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkReportResponse) ProtoMessage() {}

func (x *ForkReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkReportResponse.ProtoReflect.Descriptor instead.
func (*ForkReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{95}
}

func (x *ForkReportResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type CreateReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateReportRequest) Reset() {
	*x = CreateReportRequest{}
	mi := &file_proto_dekart_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportRequest) ProtoMessage() {}

func (x *CreateReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportRequest.ProtoReflect.Descriptor instead.
func (*CreateReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{96}
}

type CreateReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report *Report `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CreateReportResponse) Reset() {
	*x = CreateReportResponse{}
	mi := &file_proto_dekart_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportResponse) ProtoMessage() {}

func (x *CreateReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportResponse.ProtoReflect.Descriptor instead.
func (*CreateReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{97}
}

func (x *CreateReportResponse) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

type QueryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label        string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Type         QueryParam_Type `protobuf:"varint,3,opt,name=type,proto3,enum=QueryParam_Type" json:"type,omitempty"`
	DefaultValue string          `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *QueryParam) Reset() {
	*x = QueryParam{}
	mi := &file_proto_dekart_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParam) ProtoMessage() {}

func (x *QueryParam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParam.ProtoReflect.Descriptor instead.
func (*QueryParam) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{98}
}

func (x *QueryParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParam) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryParam) GetType() QueryParam_Type {
	if x != nil {
		return x.Type
	}
	return QueryParam_TYPE_UNSPECIFIED
}

func (x *QueryParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type GetEnvResponse_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  GetEnvResponse_Variable_Type `protobuf:"varint,1,opt,name=type,proto3,enum=GetEnvResponse_Variable_Type" json:"type,omitempty"`
	Value string                       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetEnvResponse_Variable) Reset() {
	*x = GetEnvResponse_Variable{}
	mi := &file_proto_dekart_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvResponse_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvResponse_Variable) ProtoMessage() {}

func (x *GetEnvResponse_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dekart_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvResponse_Variable.ProtoReflect.Descriptor instead.
func (*GetEnvResponse_Variable) Descriptor() ([]byte, []int) {
	return file_proto_dekart_proto_rawDescGZIP(), []int{64, 0}
}

func (x *GetEnvResponse_Variable) GetType() GetEnvResponse_Variable_Type {
	if x != nil {
		return x.Type
	}
	return GetEnvResponse_Variable_TYPE_UNSPECIFIED
}

func (x *GetEnvResponse_Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_proto_dekart_proto protoreflect.FileDescriptor

var file_proto_dekart_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x6b, 0x61, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x68, 0x65,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x41,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x69, 0x6e, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x73, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x13, 0x0a,
	0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x75,
	0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x69, 0x55,
	0x72, 0x6c, 0x22, 0x32, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb0, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x54, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xe8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4d, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52,
	0x75, 0x6e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x69, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x69, 0x55, 0x72, 0x6c, 0x22,
	0x3f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c,
	0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x09, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3f, 0x0a, 0x18, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6e,
	0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x12, 0x73, 0x6e, 0x6f,
	0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x11,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x0b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x68,
	0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x68, 0x65, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x22, 0x78, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45,
	0x64, 0x69, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf7, 0x06, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0xac, 0x06, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x05, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x42, 0x4f, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x58, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x58, 0x5f, 0x48, 0x4f,
	0x4d, 0x45, 0x50, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x4d, 0x41, 0x5a,
	0x4f, 0x4e, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x41, 0x50, 0x10, 0x08, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x09, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x0d, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x48, 0x54,
	0x4d, 0x4c, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x58, 0x5f,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x51, 0x4c,
	0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x49, 0x56, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10,
	0x14, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x55, 0x58,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4b, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x19, 0x22, 0x7e, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x69, 0x55, 0x72, 0x6c,
	0x12, 0x33, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x03, 0x22, 0x4d, 0x0a, 0x14,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x6e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x24, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x76, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x37, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x37, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x22, 0xfc,
	0x04, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61,
	0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x02,
	0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x05, 0x0a, 0x08,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x09, 0x64, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x77, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x05, 0x22, 0xb3, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x22, 0xe2, 0x02, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22,
	0xd6, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xab, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x12, 0x0a,
	0x10, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6d, 0x0a, 0x13, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x30, 0x0a, 0x11,
	0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x31,
	0x0a, 0x12, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0xe7, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x45, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x48, 0x45, 0x4e, 0x41, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x06, 0x32, 0x9b, 0x16, 0x0a, 0x06, 0x44, 0x65,
	0x6b, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1b,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x11, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6d,
	0x65, 0x12, 0x14, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x15, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x2e,
	0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x41, 0x6c, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x6c, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x52,
	0x75, 0x6e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x12, 0x11, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1a,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x63, 0x70, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dekart_proto_rawDescOnce sync.Once
	file_proto_dekart_proto_rawDescData = file_proto_dekart_proto_rawDesc
)

func file_proto_dekart_proto_rawDescGZIP() []byte {
	file_proto_dekart_proto_rawDescOnce.Do(func() {
		file_proto_dekart_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dekart_proto_rawDescData)
	})
	return file_proto_dekart_proto_rawDescData
}

var file_proto_dekart_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_proto_dekart_proto_msgTypes = make([]protoimpl.MessageInfo, 100)
var file_proto_dekart_proto_goTypes = []any{
	(UserStatus)(0),     // 0: UserStatus
	(UserRole)(0),       // 1: UserRole
	(PlanType)(0),       // 2: PlanType
	(ConnectionType)(0), // 3: ConnectionType
	(UpdateWorkspaceUserRequest_UserUpdateType)(0), // 4: UpdateWorkspaceUserRequest.UserUpdateType
	(GetEnvResponse_Variable_Type)(0),              // 5: GetEnvResponse.Variable.Type
	(AuthState_Action)(0),                          // 6: AuthState.Action
	(QueryJob_JobStatus)(0),                        // 7: QueryJob.JobStatus
	(Query_QuerySource)(0),                         // 8: Query.QuerySource
	(File_Status)(0),                               // 9: File.Status
	(QueryParam_Type)(0),                           // 10: QueryParam.Type
	(*GetWherobotsConnectionHintRequest)(nil),      // 11: GetWherobotsConnectionHintRequest
	(*GetWherobotsConnectionHintResponse)(nil),     // 12: GetWherobotsConnectionHintResponse
	(*AddReportDirectAccessRequest)(nil),           // 13: AddReportDirectAccessRequest
	(*AddReportDirectAccessResponse)(nil),          // 14: AddReportDirectAccessResponse
	(*GetReportAnalyticsRequest)(nil),              // 15: GetReportAnalyticsRequest
	(*GetReportAnalyticsResponse)(nil),             // 16: GetReportAnalyticsResponse
	(*AddReadmeRequest)(nil),                       // 17: AddReadmeRequest
	(*AddReadmeResponse)(nil),                      // 18: AddReadmeResponse
	(*RemoveReadmeRequest)(nil),                    // 19: RemoveReadmeRequest
	(*RemoveReadmeResponse)(nil),                   // 20: RemoveReadmeResponse
	(*AllowExportDatasetsRequest)(nil),             // 21: AllowExportDatasetsRequest
	(*AllowExportDatasetsResponse)(nil),            // 22: AllowExportDatasetsResponse
	(*CancelJobRequest)(nil),                       // 23: CancelJobRequest
	(*CancelJobResponse)(nil),                      // 24: CancelJobResponse
	(*PublishReportRequest)(nil),                   // 25: PublishReportRequest
	(*PublishReportResponse)(nil),                  // 26: PublishReportResponse
	(*GetStripePortalSessionRequest)(nil),          // 27: GetStripePortalSessionRequest
	(*GetStripePortalSessionResponse)(nil),         // 28: GetStripePortalSessionResponse
	(*UpdateWorkspaceUserRequest)(nil),             // 29: UpdateWorkspaceUserRequest
	(*UpdateWorkspaceUserResponse)(nil),            // 30: UpdateWorkspaceUserResponse
	(*GetWorkspaceRequest)(nil),                    // 31: GetWorkspaceRequest
	(*GetWorkspaceResponse)(nil),                   // 32: GetWorkspaceResponse
	(*CreateWorkspaceRequest)(nil),                 // 33: CreateWorkspaceRequest
	(*CreateWorkspaceResponse)(nil),                // 34: CreateWorkspaceResponse
	(*UpdateWorkspaceRequest)(nil),                 // 35: UpdateWorkspaceRequest
	(*UpdateWorkspaceResponse)(nil),                // 36: UpdateWorkspaceResponse
	(*RespondToInviteRequest)(nil),                 // 37: RespondToInviteRequest
	(*RespondToInviteResponse)(nil),                // 38: RespondToInviteResponse
	(*GetInvitesRequest)(nil),                      // 39: GetInvitesRequest
	(*WorkspaceInvite)(nil),                        // 40: WorkspaceInvite
	(*GetInvitesResponse)(nil),                     // 41: GetInvitesResponse
	(*User)(nil),                                   // 42: User
	(*GetGcpProjectListRequest)(nil),               // 43: GetGcpProjectListRequest
	(*GetGcpProjectListResponse)(nil),              // 44: GetGcpProjectListResponse
	(*SetDefaultConnectionRequest)(nil),            // 45: SetDefaultConnectionRequest
	(*SetDefaultConnectionResponse)(nil),           // 46: SetDefaultConnectionResponse
	(*RunAllQueriesRequest)(nil),                   // 47: RunAllQueriesRequest
	(*RunAllQueriesResponse)(nil),                  // 48: RunAllQueriesResponse
	(*Workspace)(nil),                              // 49: Workspace
	(*Subscription)(nil),                           // 50: Subscription
	(*CreateSubscriptionRequest)(nil),              // 51: CreateSubscriptionRequest
	(*CreateSubscriptionResponse)(nil),             // 52: CreateSubscriptionResponse
	(*GetConnectionListRequest)(nil),               // 53: GetConnectionListRequest
	(*GetConnectionListResponse)(nil),              // 54: GetConnectionListResponse
	(*GetUserStreamRequest)(nil),                   // 55: GetUserStreamRequest
	(*GetUserStreamResponse)(nil),                  // 56: GetUserStreamResponse
	(*TestConnectionRequest)(nil),                  // 57: TestConnectionRequest
	(*TestConnectionResponse)(nil),                 // 58: TestConnectionResponse
	(*ArchiveConnectionRequest)(nil),               // 59: ArchiveConnectionRequest
	(*ArchiveConnectionResponse)(nil),              // 60: ArchiveConnectionResponse
	(*UpdateConnectionRequest)(nil),                // 61: UpdateConnectionRequest
	(*UpdateConnectionResponse)(nil),               // 62: UpdateConnectionResponse
	(*CreateConnectionRequest)(nil),                // 63: CreateConnectionRequest
	(*CreateConnectionResponse)(nil),               // 64: CreateConnectionResponse
	(*Connection)(nil),                             // 65: Connection
	(*Secret)(nil),                                 // 66: Secret
	(*GetUsageRequest)(nil),                        // 67: GetUsageRequest
	(*GetUsageResponse)(nil),                       // 68: GetUsageResponse
	(*SetDiscoverableRequest)(nil),                 // 69: SetDiscoverableRequest
	(*SetDiscoverableResponse)(nil),                // 70: SetDiscoverableResponse
	(*RemoveDatasetRequest)(nil),                   // 71: RemoveDatasetRequest
	(*RemoveDatasetResponse)(nil),                  // 72: RemoveDatasetResponse
	(*StreamOptions)(nil),                          // 73: StreamOptions
	(*GetEnvRequest)(nil),                          // 74: GetEnvRequest
	(*GetEnvResponse)(nil),                         // 75: GetEnvResponse
	(*RedirectState)(nil),                          // 76: RedirectState
	(*AuthState)(nil),                              // 77: AuthState
	(*ArchiveReportRequest)(nil),                   // 78: ArchiveReportRequest
	(*ArchiveReportResponse)(nil),                  // 79: ArchiveReportResponse
	(*ReportListRequest)(nil),                      // 80: ReportListRequest
	(*ReportListResponse)(nil),                     // 81: ReportListResponse
	(*Readme)(nil),                                 // 82: Readme
	(*ReportAnalytics)(nil),                        // 83: ReportAnalytics
	(*Report)(nil),                                 // 84: Report
	(*Dataset)(nil),                                // 85: Dataset
	(*QueryJob)(nil),                               // 86: QueryJob
	(*Query)(nil),                                  // 87: Query
	(*File)(nil),                                   // 88: File
	(*UpdateReportRequest)(nil),                    // 89: UpdateReportRequest
	(*UpdateReportResponse)(nil),                   // 90: UpdateReportResponse
	(*RunQueryRequest)(nil),                        // 91: RunQueryRequest
	(*RunQueryResponse)(nil),                       // 92: RunQueryResponse
	(*UpdateDatasetNameRequest)(nil),               // 93: UpdateDatasetNameRequest
	(*UpdateDatasetNameResponse)(nil),              // 94: UpdateDatasetNameResponse
	(*UpdateDatasetConnectionRequest)(nil),         // 95: UpdateDatasetConnectionRequest
	(*UpdateDatasetConnectionResponse)(nil),        // 96: UpdateDatasetConnectionResponse
	(*CreateDatasetRequest)(nil),                   // 97: CreateDatasetRequest
	(*CreateDatasetResponse)(nil),                  // 98: CreateDatasetResponse
	(*CreateFileRequest)(nil),                      // 99: CreateFileRequest
	(*CreateFileResponse)(nil),                     // 100: CreateFileResponse
	(*CreateQueryRequest)(nil),                     // 101: CreateQueryRequest
	(*CreateQueryResponse)(nil),                    // 102: CreateQueryResponse
	(*ReportStreamRequest)(nil),                    // 103: ReportStreamRequest
	(*ReportStreamResponse)(nil),                   // 104: ReportStreamResponse
	(*ForkReportRequest)(nil),                      // 105: ForkReportRequest
	(*ForkReportResponse)(nil),                     // 106: ForkReportResponse
	(*CreateReportRequest)(nil),                    // 107: CreateReportRequest
	(*CreateReportResponse)(nil),                   // 108: CreateReportResponse
	(*QueryParam)(nil),                             // 109: QueryParam
	(*GetEnvResponse_Variable)(nil),                // 110: GetEnvResponse.Variable
}
var file_proto_dekart_proto_depIdxs = []int32{
	66,  // 0: GetWherobotsConnectionHintRequest.wherobots_key:type_name -> Secret
	83,  // 1: GetReportAnalyticsResponse.analytics:type_name -> ReportAnalytics
	4,   // 2: UpdateWorkspaceUserRequest.user_update_type:type_name -> UpdateWorkspaceUserRequest.UserUpdateType
	1,   // 3: UpdateWorkspaceUserRequest.role:type_name -> UserRole
	49,  // 4: GetWorkspaceResponse.Workspace:type_name -> Workspace
	50,  // 5: GetWorkspaceResponse.subscription:type_name -> Subscription
	42,  // 6: GetWorkspaceResponse.users:type_name -> User
	40,  // 7: GetWorkspaceResponse.invites:type_name -> WorkspaceInvite
	40,  // 8: GetInvitesResponse.invites:type_name -> WorkspaceInvite
	0,   // 9: User.status:type_name -> UserStatus
	1,   // 10: User.role:type_name -> UserRole
	109, // 11: RunAllQueriesRequest.query_params:type_name -> QueryParam
	2,   // 12: Subscription.plan_type:type_name -> PlanType
	2,   // 13: CreateSubscriptionRequest.plan_type:type_name -> PlanType
	65,  // 14: GetConnectionListResponse.connections:type_name -> Connection
	73,  // 15: GetUserStreamRequest.stream_options:type_name -> StreamOptions
	73,  // 16: GetUserStreamResponse.stream_options:type_name -> StreamOptions
	2,   // 17: GetUserStreamResponse.plan_type:type_name -> PlanType
	1,   // 18: GetUserStreamResponse.role:type_name -> UserRole
	65,  // 19: TestConnectionRequest.connection:type_name -> Connection
	65,  // 20: UpdateConnectionRequest.connection:type_name -> Connection
	65,  // 21: UpdateConnectionResponse.connection:type_name -> Connection
	65,  // 22: CreateConnectionRequest.connection:type_name -> Connection
	65,  // 23: CreateConnectionResponse.connection:type_name -> Connection
	3,   // 24: Connection.connection_type:type_name -> ConnectionType
	66,  // 25: Connection.snowflake_password:type_name -> Secret
	66,  // 26: Connection.bigquery_key:type_name -> Secret
	66,  // 27: Connection.snowflake_key:type_name -> Secret
	66,  // 28: Connection.wherobots_key:type_name -> Secret
	110, // 29: GetEnvResponse.variables:type_name -> GetEnvResponse.Variable
	6,   // 30: AuthState.action:type_name -> AuthState.Action
	73,  // 31: ReportListRequest.stream_options:type_name -> StreamOptions
	84,  // 32: ReportListResponse.reports:type_name -> Report
	73,  // 33: ReportListResponse.stream_options:type_name -> StreamOptions
	109, // 34: Report.query_params:type_name -> QueryParam
	82,  // 35: Report.readme:type_name -> Readme
	3,   // 36: Dataset.connection_type:type_name -> ConnectionType
	7,   // 37: QueryJob.job_status:type_name -> QueryJob.JobStatus
	8,   // 38: Query.query_source:type_name -> Query.QuerySource
	9,   // 39: File.file_status:type_name -> File.Status
	87,  // 40: UpdateReportRequest.query:type_name -> Query
	109, // 41: UpdateReportRequest.query_params:type_name -> QueryParam
	82,  // 42: UpdateReportRequest.readme:type_name -> Readme
	109, // 43: RunQueryRequest.query_params:type_name -> QueryParam
	87,  // 44: CreateQueryResponse.query:type_name -> Query
	84,  // 45: ReportStreamRequest.report:type_name -> Report
	73,  // 46: ReportStreamRequest.stream_options:type_name -> StreamOptions
	84,  // 47: ReportStreamResponse.report:type_name -> Report
	87,  // 48: ReportStreamResponse.queries:type_name -> Query
	73,  // 49: ReportStreamResponse.stream_options:type_name -> StreamOptions
	85,  // 50: ReportStreamResponse.datasets:type_name -> Dataset
	88,  // 51: ReportStreamResponse.files:type_name -> File
	86,  // 52: ReportStreamResponse.query_jobs:type_name -> QueryJob
	84,  // 53: CreateReportResponse.report:type_name -> Report
	10,  // 54: QueryParam.type:type_name -> QueryParam.Type
	5,   // 55: GetEnvResponse.Variable.type:type_name -> GetEnvResponse.Variable.Type
	107, // 56: Dekart.CreateReport:input_type -> CreateReportRequest
	105, // 57: Dekart.ForkReport:input_type -> ForkReportRequest
	89,  // 58: Dekart.UpdateReport:input_type -> UpdateReportRequest
	78,  // 59: Dekart.ArchiveReport:input_type -> ArchiveReportRequest
	69,  // 60: Dekart.SetDiscoverable:input_type -> SetDiscoverableRequest
	25,  // 61: Dekart.PublishReport:input_type -> PublishReportRequest
	21,  // 62: Dekart.AllowExportDatasets:input_type -> AllowExportDatasetsRequest
	17,  // 63: Dekart.AddReadme:input_type -> AddReadmeRequest
	19,  // 64: Dekart.RemoveReadme:input_type -> RemoveReadmeRequest
	13,  // 65: Dekart.AddReportDirectAccess:input_type -> AddReportDirectAccessRequest
	97,  // 66: Dekart.CreateDataset:input_type -> CreateDatasetRequest
	71,  // 67: Dekart.RemoveDataset:input_type -> RemoveDatasetRequest
	93,  // 68: Dekart.UpdateDatasetName:input_type -> UpdateDatasetNameRequest
	95,  // 69: Dekart.UpdateDatasetConnection:input_type -> UpdateDatasetConnectionRequest
	99,  // 70: Dekart.CreateFile:input_type -> CreateFileRequest
	101, // 71: Dekart.CreateQuery:input_type -> CreateQueryRequest
	91,  // 72: Dekart.RunQuery:input_type -> RunQueryRequest
	47,  // 73: Dekart.RunAllQueries:input_type -> RunAllQueriesRequest
	23,  // 74: Dekart.CancelJob:input_type -> CancelJobRequest
	74,  // 75: Dekart.GetEnv:input_type -> GetEnvRequest
	103, // 76: Dekart.GetReportStream:input_type -> ReportStreamRequest
	80,  // 77: Dekart.GetReportListStream:input_type -> ReportListRequest
	55,  // 78: Dekart.GetUserStream:input_type -> GetUserStreamRequest
	67,  // 79: Dekart.GetUsage:input_type -> GetUsageRequest
	15,  // 80: Dekart.GetReportAnalytics:input_type -> GetReportAnalyticsRequest
	63,  // 81: Dekart.CreateConnection:input_type -> CreateConnectionRequest
	43,  // 82: Dekart.GetGcpProjectList:input_type -> GetGcpProjectListRequest
	61,  // 83: Dekart.UpdateConnection:input_type -> UpdateConnectionRequest
	59,  // 84: Dekart.ArchiveConnection:input_type -> ArchiveConnectionRequest
	53,  // 85: Dekart.GetConnectionList:input_type -> GetConnectionListRequest
	57,  // 86: Dekart.TestConnection:input_type -> TestConnectionRequest
	45,  // 87: Dekart.SetDefaultConnection:input_type -> SetDefaultConnectionRequest
	11,  // 88: Dekart.GetWherobotsConnectionHint:input_type -> GetWherobotsConnectionHintRequest
	37,  // 89: Dekart.RespondToInvite:input_type -> RespondToInviteRequest
	51,  // 90: Dekart.CreateSubscription:input_type -> CreateSubscriptionRequest
	27,  // 91: Dekart.GetStripePortalSession:input_type -> GetStripePortalSessionRequest
	33,  // 92: Dekart.CreateWorkspace:input_type -> CreateWorkspaceRequest
	35,  // 93: Dekart.UpdateWorkspace:input_type -> UpdateWorkspaceRequest
	31,  // 94: Dekart.GetWorkspace:input_type -> GetWorkspaceRequest
	29,  // 95: Dekart.UpdateWorkspaceUser:input_type -> UpdateWorkspaceUserRequest
	108, // 96: Dekart.CreateReport:output_type -> CreateReportResponse
	106, // 97: Dekart.ForkReport:output_type -> ForkReportResponse
	90,  // 98: Dekart.UpdateReport:output_type -> UpdateReportResponse
	79,  // 99: Dekart.ArchiveReport:output_type -> ArchiveReportResponse
	70,  // 100: Dekart.SetDiscoverable:output_type -> SetDiscoverableResponse
	26,  // 101: Dekart.PublishReport:output_type -> PublishReportResponse
	22,  // 102: Dekart.AllowExportDatasets:output_type -> AllowExportDatasetsResponse
	18,  // 103: Dekart.AddReadme:output_type -> AddReadmeResponse
	20,  // 104: Dekart.RemoveReadme:output_type -> RemoveReadmeResponse
	14,  // 105: Dekart.AddReportDirectAccess:output_type -> AddReportDirectAccessResponse
	98,  // 106: Dekart.CreateDataset:output_type -> CreateDatasetResponse
	72,  // 107: Dekart.RemoveDataset:output_type -> RemoveDatasetResponse
	94,  // 108: Dekart.UpdateDatasetName:output_type -> UpdateDatasetNameResponse
	96,  // 109: Dekart.UpdateDatasetConnection:output_type -> UpdateDatasetConnectionResponse
	100, // 110: Dekart.CreateFile:output_type -> CreateFileResponse
	102, // 111: Dekart.CreateQuery:output_type -> CreateQueryResponse
	92,  // 112: Dekart.RunQuery:output_type -> RunQueryResponse
	48,  // 113: Dekart.RunAllQueries:output_type -> RunAllQueriesResponse
	24,  // 114: Dekart.CancelJob:output_type -> CancelJobResponse
	75,  // 115: Dekart.GetEnv:output_type -> GetEnvResponse
	104, // 116: Dekart.GetReportStream:output_type -> ReportStreamResponse
	81,  // 117: Dekart.GetReportListStream:output_type -> ReportListResponse
	56,  // 118: Dekart.GetUserStream:output_type -> GetUserStreamResponse
	68,  // 119: Dekart.GetUsage:output_type -> GetUsageResponse
	16,  // 120: Dekart.GetReportAnalytics:output_type -> GetReportAnalyticsResponse
	64,  // 121: Dekart.CreateConnection:output_type -> CreateConnectionResponse
	44,  // 122: Dekart.GetGcpProjectList:output_type -> GetGcpProjectListResponse
	62,  // 123: Dekart.UpdateConnection:output_type -> UpdateConnectionResponse
	60,  // 124: Dekart.ArchiveConnection:output_type -> ArchiveConnectionResponse
	54,  // 125: Dekart.GetConnectionList:output_type -> GetConnectionListResponse
	58,  // 126: Dekart.TestConnection:output_type -> TestConnectionResponse
	46,  // 127: Dekart.SetDefaultConnection:output_type -> SetDefaultConnectionResponse
	12,  // 128: Dekart.GetWherobotsConnectionHint:output_type -> GetWherobotsConnectionHintResponse
	38,  // 129: Dekart.RespondToInvite:output_type -> RespondToInviteResponse
	52,  // 130: Dekart.CreateSubscription:output_type -> CreateSubscriptionResponse
	28,  // 131: Dekart.GetStripePortalSession:output_type -> GetStripePortalSessionResponse
	34,  // 132: Dekart.CreateWorkspace:output_type -> CreateWorkspaceResponse
	36,  // 133: Dekart.UpdateWorkspace:output_type -> UpdateWorkspaceResponse
	32,  // 134: Dekart.GetWorkspace:output_type -> GetWorkspaceResponse
	30,  // 135: Dekart.UpdateWorkspaceUser:output_type -> UpdateWorkspaceUserResponse
	96,  // [96:136] is the sub-list for method output_type
	56,  // [56:96] is the sub-list for method input_type
	56,  // [56:56] is the sub-list for extension type_name
	56,  // [56:56] is the sub-list for extension extendee
	0,   // [0:56] is the sub-list for field type_name
}

func init() { file_proto_dekart_proto_init() }
func file_proto_dekart_proto_init() {
	if File_proto_dekart_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dekart_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   100,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dekart_proto_goTypes,
		DependencyIndexes: file_proto_dekart_proto_depIdxs,
		EnumInfos:         file_proto_dekart_proto_enumTypes,
		MessageInfos:      file_proto_dekart_proto_msgTypes,
	}.Build()
	File_proto_dekart_proto = out.File
	file_proto_dekart_proto_rawDesc = nil
	file_proto_dekart_proto_goTypes = nil
	file_proto_dekart_proto_depIdxs = nil
}
