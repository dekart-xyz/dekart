syntax = "proto3";

option go_package = "./proto";

service Dekart {
    //reports
    rpc CreateReport(CreateReportRequest) returns (CreateReportResponse) {}
    rpc ForkReport(ForkReportRequest) returns (ForkReportResponse) {}
    rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse) {}
    rpc ArchiveReport(ArchiveReportRequest) returns (ArchiveReportResponse) {}
    rpc SetDiscoverable(SetDiscoverableRequest) returns (SetDiscoverableResponse) {}
    rpc PublishReport(PublishReportRequest) returns (PublishReportResponse) {}
    rpc AllowExportDatasets(AllowExportDatasetsRequest) returns (AllowExportDatasetsResponse) {}
    rpc AddReadme(AddReadmeRequest) returns (AddReadmeResponse) {}
    rpc RemoveReadme(RemoveReadmeRequest) returns (RemoveReadmeResponse) {}
    rpc AddReportDirectAccess(AddReportDirectAccessRequest) returns (AddReportDirectAccessResponse) {}

    // datasets
    rpc CreateDataset(CreateDatasetRequest) returns (CreateDatasetResponse) {}
    rpc RemoveDataset(RemoveDatasetRequest) returns (RemoveDatasetResponse) {}
    rpc UpdateDatasetName(UpdateDatasetNameRequest) returns (UpdateDatasetNameResponse) {}
    rpc UpdateDatasetConnection(UpdateDatasetConnectionRequest) returns (UpdateDatasetConnectionResponse) {}

    // files
    rpc CreateFile(CreateFileRequest) returns (CreateFileResponse) {}

    // queries
    rpc CreateQuery(CreateQueryRequest) returns (CreateQueryResponse) {}
    rpc RunQuery(RunQueryRequest) returns (RunQueryResponse) {}
    rpc RunAllQueries(RunAllQueriesRequest) returns (RunAllQueriesResponse) {}

    //jobs
    rpc CancelJob(CancelJobRequest) returns (CancelJobResponse) {}

    rpc GetEnv(GetEnvRequest) returns (GetEnvResponse) {}

    // streams
    rpc GetReportStream(ReportStreamRequest) returns (stream ReportStreamResponse) {}
    rpc GetReportListStream(ReportListRequest) returns (stream ReportListResponse) {}
    rpc GetUserStream(GetUserStreamRequest) returns (stream GetUserStreamResponse) {}

    //statistics
    rpc GetUsage(GetUsageRequest) returns (GetUsageResponse) {}
    rpc GetReportAnalytics(GetReportAnalyticsRequest) returns (GetReportAnalyticsResponse) {}

    //connections
    rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
    rpc GetGcpProjectList(GetGcpProjectListRequest) returns (GetGcpProjectListResponse) {}
    rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse) {}
    rpc ArchiveConnection(ArchiveConnectionRequest) returns (ArchiveConnectionResponse) {}
    rpc GetConnectionList(GetConnectionListRequest) returns (GetConnectionListResponse) {}
    rpc TestConnection(TestConnectionRequest) returns (TestConnectionResponse) {}
    rpc SetDefaultConnection(SetDefaultConnectionRequest) returns (SetDefaultConnectionResponse) {}
    rpc GetWherobotsConnectionHint(GetWherobotsConnectionHintRequest) returns (GetWherobotsConnectionHintResponse) {}

    //user
    rpc RespondToInvite(RespondToInviteRequest) returns (RespondToInviteResponse) {}

    //subscriptions
    rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {}
    rpc GetStripePortalSession(GetStripePortalSessionRequest) returns (GetStripePortalSessionResponse) {}

    //workspace
    rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse) {}
    rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse) {}
    rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse) {}
    rpc UpdateWorkspaceUser(UpdateWorkspaceUserRequest) returns (UpdateWorkspaceUserResponse) {}
}

message GetWherobotsConnectionHintRequest {
    string wherobots_host = 18;
    Secret wherobots_key = 19;
}

message GetWherobotsConnectionHintResponse {
    string hint_json = 1; // hint for Wherobots connection
}

message AddReportDirectAccessRequest {
    string report_id = 1;
    repeated string emails = 2; // list of user emails to add direct access to the report
}
message AddReportDirectAccessResponse {
}

message GetReportAnalyticsRequest {
    string report_id = 1;
}

message GetReportAnalyticsResponse {
    ReportAnalytics analytics = 1;
}

message AddReadmeRequest {
    string report_id = 1;
    string markdown = 2;
    string from_dataset_id = 3; // dataset id to remove from report
}

message AddReadmeResponse {
}

message RemoveReadmeRequest {
    string report_id = 1;
}

message RemoveReadmeResponse {
}

message AllowExportDatasetsRequest {
    string report_id = 1;
    bool allow_export = 2;
}

message AllowExportDatasetsResponse {
}

message CancelJobRequest {
    string job_id = 1;
}

message CancelJobResponse {
}

message PublishReportRequest {
    string report_id = 1;
    bool publish = 2;
}

message PublishReportResponse {
}

message GetStripePortalSessionRequest {
    string ui_url = 1;
}

message GetStripePortalSessionResponse {
    string url = 1;
}

message UpdateWorkspaceUserRequest {
    string email = 1;
    enum UserUpdateType {
        USER_UPDATE_TYPE_UNSPECIFIED = 0;
        USER_UPDATE_TYPE_ADD = 1;
        USER_UPDATE_TYPE_REMOVE = 2;
        USER_UPDATE_TYPE_UPDATE = 3;
    }
    UserUpdateType user_update_type = 2;
    UserRole role = 3;
}

message UpdateWorkspaceUserResponse {
}

message GetWorkspaceRequest {
}

message GetWorkspaceResponse {
    Workspace Workspace = 1;
    Subscription subscription = 2;
    repeated User users = 3;
    repeated WorkspaceInvite invites = 4;
    int64 added_users_count = 5; // to not duplicate count logic in UI
}

message CreateWorkspaceRequest {
    string workspace_name = 1;
}

message CreateWorkspaceResponse {
}

message UpdateWorkspaceRequest {
    string workspace_name = 1;
}

message UpdateWorkspaceResponse {
}

message RespondToInviteRequest {
    string invite_id = 1;
    bool accept = 2;
}

message RespondToInviteResponse {

}

message GetInvitesRequest {
}

message WorkspaceInvite {
    string workspace_id = 1;
    string invite_id = 2;
    string inviter_email = 3;
    string workspace_name = 4;
    int64 created_at = 5;
}

message GetInvitesResponse {
    repeated WorkspaceInvite invites = 1;
}

enum UserStatus {
    USER_STATUS_UNSPECIFIED = 0;
    USER_STATUS_PENDING = 1;
    USER_STATUS_ACTIVE = 2;
    USER_STATUS_REMOVED = 3;
    USER_STATUS_REJECTED = 4;
}

enum UserRole {
    ROLE_UNSPECIFIED = 0;
    ROLE_ADMIN = 1;
    ROLE_EDITOR = 2;
    ROLE_VIEWER = 3;
}

message User {
    string email = 1;
    int64 updated_at = 2;
    UserStatus status = 3;
    string invite_id = 4;
    UserRole role = 5;
}

message GetGcpProjectListRequest {
}

message GetGcpProjectListResponse {
    repeated string projects = 1;
}

message SetDefaultConnectionRequest {
    string connection_id = 1;
}

message SetDefaultConnectionResponse {
}

message RunAllQueriesRequest {
    string report_id = 1;
    repeated QueryParam query_params = 2;
    string query_params_values = 3; // url encoded
}

message RunAllQueriesResponse {

}

message Workspace {
    string id = 1;
    string name = 2;
}

message Subscription {
    PlanType plan_type = 2;
    int64 updated_at = 4; //seconds
    string customer_id = 6;
    string stripe_subscription_id = 7;
    string stripe_customer_email = 8;
    int64 cancel_at = 9; //seconds
    string item_id = 10; // stripe subscription item id
}

enum PlanType {
    TYPE_UNSPECIFIED = 0;
    TYPE_PERSONAL = 1;
    TYPE_TEAM = 2;
    TYPE_GROW = 3;
    TYPE_MAX = 4;
    TYPE_SELF_HOSTED = 5;
}

message CreateSubscriptionRequest {
    PlanType plan_type = 1;
    string ui_url = 2;
}

message CreateSubscriptionResponse {
    string redirect_url = 1;
}

message GetConnectionListRequest {
}

message GetConnectionListResponse {
    repeated Connection connections = 1;
}

message GetUserStreamRequest {
    StreamOptions stream_options = 1;
}
message GetUserStreamResponse {
    StreamOptions stream_options = 1;
    int64 connection_update = 2;
    string email = 3; // user email used to show user icon in UI
    string workspace_id = 4;
    PlanType plan_type = 5;
    int64 workspace_update = 6; // includes invites, members and subscription
    UserRole role = 7;
    bool is_playground = 8;
    bool is_default_workspace = 9;
}

message TestConnectionRequest {
    Connection connection = 1;
}

message TestConnectionResponse {
    bool success = 1;
    string error = 2;
}

message ArchiveConnectionRequest {
    string connection_id = 1;
}

message ArchiveConnectionResponse {
}

message UpdateConnectionRequest {
    Connection connection = 1;
}

message UpdateConnectionResponse {
    Connection connection = 1;
}

message CreateConnectionRequest {
    Connection connection = 1;
}

message CreateConnectionResponse {
    Connection connection = 1;
}

enum ConnectionType {
    CONNECTION_TYPE_UNSPECIFIED = 0;
    CONNECTION_TYPE_BIGQUERY = 1;
    CONNECTION_TYPE_SNOWFLAKE = 2;
    CONNECTION_TYPE_WHEROBOTS = 3;
    CONNECTION_TYPE_ATHENA = 4;
    CONNECTION_TYPE_POSTGRES = 5;
    CONNECTION_TYPE_CLICKHOUSE = 6;

}

message Connection {
    string id = 1;
    string connection_name = 2;
    string bigquery_project_id = 3;
    string cloud_storage_bucket = 4;
    bool is_default = 5;
    string author_email = 6;
    int64 created_at = 7;
    int64 updated_at = 8;
    int64 dataset_count = 9;
    bool can_store_files = 10;
    ConnectionType connection_type = 11;
    string snowflake_account_id = 12;
    string snowflake_username = 13;
    Secret snowflake_password = 14;
    string snowflake_warehouse = 15;
    Secret bigquery_key = 16;
    Secret snowflake_key = 17;
    string wherobots_host = 18;
    Secret wherobots_key = 19;
    string wherobots_runtime = 20;
    string wherobots_region = 21;
}

message Secret {
    string client_encrypted = 1; // encrypted with client key
    string server_encrypted = 2; // encrypted with server key
    int32 length = 3; // length of the password for placeholder
}

message GetUsageRequest {}

message GetUsageResponse {
    int64 total_reports = 1;
    int64 total_queries = 2;
    int64 total_files = 3;
    int64 total_authors = 4;
}

message SetDiscoverableRequest {
    string report_id = 1;
    bool discoverable = 2; // report is discoverable by other users of the same instance
    bool allow_edit = 3; // allow other users to edit the report
}

message SetDiscoverableResponse {
}

message RemoveDatasetRequest {
    string dataset_id = 1;
}

message RemoveDatasetResponse {
    string dataset_id = 1;
}

message StreamOptions {
    int64 sequence = 1;
}

message GetEnvRequest {}

message GetEnvResponse {
    message Variable {
        enum Type {
            TYPE_UNSPECIFIED = 0;
            TYPE_MAPBOX_TOKEN = 1;
            TYPE_UX_DATA_DOCUMENTATION = 2;
            TYPE_UX_HOMEPAGE = 3;
            TYPE_ALLOW_FILE_UPLOAD = 4;
            TYPE_DATASOURCE = 5;
            TYPE_STORAGE = 6;
            TYPE_REQUIRE_AMAZON_OIDC = 7;
            TYPE_REQUIRE_IAP = 8;
            TYPE_DISABLE_USAGE_STATS = 9;
            TYPE_REQUIRE_GOOGLE_OAUTH = 10;
            TYPE_BIGQUERY_PROJECT_ID = 11;
            TYPE_CLOUD_STORAGE_BUCKET = 12;
            TYPE_UX_ACCESS_ERROR_INFO_HTML = 13;
            TYPE_UX_NOT_FOUND_ERROR_INFO_HTML = 14;
            TYPE_UX_SAMPLE_QUERY_SQL = 15;
            TYPE_AES_KEY = 16;
            TYPE_AES_IV = 17;
            TYPE_AUTH_ENABLED = 18;
            TYPE_USER_DEFINED_CONNECTION = 19;
            TYPE_UX_DISABLE_VERSION_CHECK = 20;
            TYPE_ALLOW_WORKSPACE_CREATION = 21;
            TYPE_WORKSPACE_DEFAULT_ROLE = 22;
            TYPE_SECRETS_ENABLED = 23;
            TYPE_CLOUD_UX_CONFIG_JSON = 24;
            TYPE_DEKART_CLOUD = 25;
        }
        Type type = 1;
        string value = 2;
    }
    repeated Variable variables = 1;
}

// RedirectState is used to pass state between the server and the UI via redirect
message RedirectState {
    string token_json = 1;
    string error  = 2;
    bool sensitive_scopes_granted = 3; // if true, sensitive scope are granted
}

// AuthState is used to pass state between UI, auth endpoint and Google OAuth via redirect
message AuthState   {
    enum Action { // auth endpoint actions
        ACTION_UNSPECIFIED = 0;
        ACTION_REQUEST_CODE = 1; // request auth code from Google OAuth (invoked by UI)
        ACTION_REQUEST_TOKEN = 2; // request access token from Google OAuth (used as callback from Google OAuth)
        ACTION_REVOKE = 3; // revoke access token (invoked by UI)
    }
    Action action = 1;
    string auth_url = 2; // dekart backend url to handle auth request
    string ui_url = 3; // dekart frontend url to redirect to after auth
    string access_token_to_revoke = 4; // access token to revoke
    bool switch_account = 5; // if true, user will be requested to switch account
    bool sensitive_scope = 6; // if true, user will be requested to grant sensitive scope
    string login_hint = 7; // login hint for Google OAuth
}

message ArchiveReportRequest {
    string report_id = 1;
    bool archive = 2;
}

message ArchiveReportResponse {}

message ReportListRequest{
    StreamOptions stream_options = 1;
}

message ReportListResponse {
    repeated Report reports = 1;
    StreamOptions stream_options = 2;
}

message Readme {
    string markdown = 1;
}

message ReportAnalytics {
    int64 viewers_total = 1;
    int64 viewers_7d = 2;
    int64 viewers_24h = 3;
}

message Report {
    string id = 1;
    string map_config = 2;
    string title = 3;
    bool archived = 4;
    bool can_write = 5; // user can write to the report because he is the author or has edit permission
    string author_email = 6;
    bool discoverable = 7; // report is discoverable by other users of the same instance
    bool allow_edit = 8; // allow other users to edit the report
    bool is_author = 9; // user is the author of the report
    int64 created_at = 10;
    int64 updated_at = 11;
    bool is_sharable = 12; // can be shared with other users (depends where result is stored)
    bool need_sensitive_scope = 13; // need sensitive scope to run queries and read results
    bool is_playground = 14; // true - playground, false - workspace
    bool is_public = 15; // true - public, false - private
    bool allow_export = 16; // allow export datasets
    repeated QueryParam query_params = 17;
    Readme readme = 18;
    bool has_direct_access = 19; // true - report has direct access for other users, false - no direct access
}

message Dataset {
    string id = 1;
    string report_id = 2;
    string query_id = 3;
    int64 created_at = 4;
    int64 updated_at = 5;
    string file_id = 6;
    string name = 7;
    string connection_id = 8;
    ConnectionType connection_type = 9;
}

message QueryJob {
    string id = 1;
    string query_id = 2;
    string query_text = 3;
    string job_result_id = 4;
    string job_error = 5;
    int64 job_duration = 6;
    int32 total_rows = 7;
    int64 bytes_processed = 8;
    int64 result_size = 9;
    int64 created_at = 10;
    int64 updated_at = 11;

    enum JobStatus {
        JOB_STATUS_UNSPECIFIED = 0;
        JOB_STATUS_PENDING = 1;
        JOB_STATUS_RUNNING = 2;
        JOB_STATUS_DONE_LEGACY = 3;  // legacy for backwards compatibility
        JOB_STATUS_READING_RESULTS = 4; // job is done processing results
        JOB_STATUS_DONE = 5;
    }

    JobStatus job_status = 12;
    string dw_job_id = 13;
    string query_params_hash = 14;
}

message Query {
    string id = 1;
    string query_text = 2;
    int64 created_at = 3;
    int64 updated_at = 4;

    enum QuerySource {
        QUERY_SOURCE_UNSPECIFIED = 0;
        QUERY_SOURCE_INLINE = 1;
        QUERY_SOURCE_STORAGE = 2;
    }
    QuerySource query_source = 5;
    string query_source_id = 6;
}

message File {
    string id = 1;
    string name = 2;
    string mime_type = 3;
    int64 size = 4;
    string source_id = 5;
    int64 created_at = 6;
    int64 updated_at = 7;
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_NEW = 1; // default initial state
        STATUS_RECEIVED = 2; // file uploaded by user to temp storage
        STATUS_STORED = 3; // file stored in permanent storage
    }
    Status file_status = 8;
    string upload_error = 9;
}

message UpdateReportRequest {
    string report_id = 1;
    string map_config = 2;
    string title = 3;
    repeated Query query = 4;
    repeated QueryParam query_params = 5;
    Readme readme = 6;
}

message UpdateReportResponse {
    int64 updated_at = 1;
}

message RunQueryRequest {
    string query_id = 1;
    string query_text = 2;
    repeated QueryParam query_params = 3;
    string query_params_values = 4; // url encoded
}

message RunQueryResponse {
}

message UpdateDatasetNameRequest {
    string dataset_id = 1;
    string name = 2;
}

message UpdateDatasetNameResponse {
}

message UpdateDatasetConnectionRequest {
    string dataset_id = 1;
    string connection_id = 2;
}

message UpdateDatasetConnectionResponse {
}

message CreateDatasetRequest {
    string report_id = 1;
}

message CreateDatasetResponse {
}

message CreateFileRequest {
    string dataset_id = 1;
    string connection_id = 2;
}

message CreateFileResponse {
    string file_id = 1;
}

message CreateQueryRequest {
    string dataset_id = 1;
    string connection_id = 2;
}

message CreateQueryResponse {
    Query query = 1;
}

message ReportStreamRequest {
    Report report = 1;
    StreamOptions stream_options = 2;
}

message ReportStreamResponse {
    Report report = 1;
    repeated Query queries = 2;
    StreamOptions stream_options = 3;
    repeated Dataset datasets = 4;
    repeated File files = 5;
    repeated QueryJob query_jobs = 6;
    repeated string direct_access_emails = 7; // emails of users with direct access to the report
}

message ForkReportRequest {
    string report_id = 1;
}

message ForkReportResponse {
    string report_id = 1;
}

message CreateReportRequest {

}

message CreateReportResponse {
    Report report = 1;
}

message QueryParam {
    string name = 1;
    string label = 2;
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_STRING = 1;
    }
    Type type = 3;
    string default_value = 4;
}